{"version":3,"sources":["actions/index.js","components/FileEntry.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","components/LoadingPie.js","components/StockSumWindows.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["setTransactions","data","type","payload","setSortFilter","order","fileReader","FileReader","connect","dispatch","addTransaction","date","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","index","transactionType","included","removeTransactions","setPercentage","percent","handleFileRead","e","preventDefault","content","result","lines","replace","split","i","length","entry","parseFloat","className","accept","onChange","file","target","files","onloadend","readAsText","include","checked","onClick","state","transactions","TransactionsStore","setFilter","filter","map","item","Stock","name","addBuy","paid","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","addSummary","setProfit","stockMap","Map","entries","totalProfit","has","set","get","transaction","constObject","Object","assign","handleTransaction","summarize","values","push","renderSummary","readPercentage","viewBox","width","height","standalone","animate","duration","innerRadius","cornerRadius","labels","style","fill","datum","color","y","newProps","textAnchor","verticalAnchor","x","text","Math","round","fontSize","summaries","sort","a","b","divClass","pColor","console","log","App","defaultState","sortFilter","sortOrder","transactionsReducer","action","res","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.0c6f5b16.chunk.js","sourcesContent":["export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage } from '../actions'\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, dispatch}) => {\n  const handleFileRead = (e) => {\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n        lines[i] = null;\n        entry = null;\n      }\n    }\n\n  const handleFileChosen = (file) => {\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0], addTransaction)}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => (\n  <tr>\n    <td>\n      <input type=\"checkbox\" checked={included}\n        onClick={() => { include(index, date,included)}}\n      />\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n)\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter, setTransactions } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter, setTransactions }) => (\n  <table className=\"centering\">\n    <thead>\n        <tr>\n        <th> Included </th>\n        <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n        <th> Account </th>\n        <th> Transactiontype </th>\n        <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n        <th> Amount </th>\n        <th> Price </th>\n        <th> Total </th>\n        <th> Brokerage </th>\n        <th> Currency </th>\n        <th> Id </th>\n      </tr>\n    </thead>\n    <tbody>\n      {transactions.map(item =>\n        <Transaction\n          {...item}\n        />\n      )}\n    </tbody>\n  </table>\n)\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n}\n\nconst getTransactions = (transactions, sortFilter) =>{\n  return transactions.sort((a,b) => {\n    return a[sortFilter] < b[sortFilter] ? 1 : -1;\n    setTransactions(transactions);\n  })\n}\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter)),\n  setTransactions: data => dispatch(setTransactions(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ? parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*parseFloat(this.avgBought)) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, dispatch}) => {\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const handleTransaction = (stock, transaction) => {\n    var constObject = Object.assign({}, transaction);\n    switch(constObject.transactiontype){\n      case 'Köp':\n        stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n        break;\n      case 'Sälj':\n        stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n        break;\n      case 'Utdelning':\n        stock.addDividents(constObject.amount, constObject.price);\n        break;\n      default: break;\n    }\n  };\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          handleTransaction(stock, entry);\n        }\n      });\n  };\n\n  const renderSummary = (entries) => {\n    for(var entry of stockMap.values()){\n      entries.push(entry);\n    }\n    return(\n      entries.map(entry => {\n          {entry.getProfits()};\n          {entry.roundDecimals()};\n          {totalProfit += parseFloat(entry.returnProfit())}\n          {setProfit(totalProfit)}\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    summarize(transactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th onClick={() => setFilter(\"stockname\")}>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary(entries)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Profit = ({profit, dispatch}) => {\n  return (\n  <h2> Total Profit: {profit} </h2>\n  )\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { VictoryPie, VictoryAnimation, VictoryLabel } from 'victory'\n\nconst LoadingPie = ({readPercentage}) => {\n\n  return(\n    <div>\n      <svg viewBox=\"0 0 400 400\" width=\"10%\" height=\"10%\">\n        <VictoryPie\n          standalone={false}\n          animate={{ duration: 5000 }}\n          width={400} height={400}\n          data={readPercentage}\n          innerRadius={120}\n          cornerRadius={25}\n          labels={() => null}\n          style={{\n            data: { fill: ({ datum }) => {\n              const color = (datum.y*100) > 30 ? \"green\" : \"red\";\n              return datum.y*100 > 99 ? color : \"transparent\";\n            }\n            }\n          }}\n        />\n        <VictoryAnimation duration={1000} data={readPercentage}>\n          {(newProps) => {\n            return (\n              <VictoryLabel\n                textAnchor=\"middle\" verticalAnchor=\"middle\"\n                x={200} y={200}\n                text={`${Math.round(readPercentage[0].y*100)}%`}\n                style={{ fontSize: 45 }}\n              />\n            );\n          }}\n        </VictoryAnimation>\n      </svg>\n    </div>\n  )\n}\n\nLoadingPie.propTypes = {\n  readPercentage: PropTypes.number.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  readPercentage: state.TransactionsStore.readPercentage\n})\n\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LoadingPie)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {FaCoins, FaEllipsisH} from 'react-icons/fa'\n\n\nconst renderWindows = (entries) => {\n  /*\n  return (\n    <div className=\"centering inlineBlock StockSummaryWindow SumWinProfit\">\n      <div className=\"rubricArea\"> <h3> ATLA B </h3> </div>\n      <hr className=\"sumAreaDivider\"></hr>\n      <div className=\"profitArea\">\n        <div className=\"inlineBlock\">\n          <p> Profit  <FaCoins className=\"sumWindowCoins\"/></p>\n        </div>\n      </div>\n    </div>\n  ) */\n  return(\n    entries.map(entry => {\n      var divClass =  parseFloat(entry.profit) >= 0 ? \"SumWinProfit\" : \"SumLossProfit\";\n      var pColor = parseFloat(entry.profit) >= 0 ? \"greenText\" : \"redText\";\n        return (\n          <div className={\"centering inlineBlock StockSummaryWindow \" + divClass}>\n            <div className=\"rubricArea\"> <h3> {entry.name} </h3> </div>\n            <hr className=\"sumAreaDivider\"></hr>\n            <div className=\"profitArea\">\n              <div className=\"inlineBlock\">\n                <p className={pColor}> {entry.profit}  <FaCoins className=\"sumWindowCoins\"/></p>\n              </div>\n              <br/>\n              <FaEllipsisH onClick={() => (console.log(\"Clicking More\"))} className=\"moreButton\"/>\n            </div>\n          </div>\n        )\n    })\n  )\n};\n\nconst StockSummaryWindows = ({summaries, dispatch}) => {\n  return (\n    <div>\n      {renderWindows(summaries)}\n    </div>\n  )\n}\n\nStockSummaryWindows.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StockSummaryWindows)\n","import React from 'react';\nimport './App.css';\nimport FileEntry from './components/FileEntry'\nimport TransactionList from './components/TransactionList'\nimport DataSummary from './components/DataSummary'\nimport Profit from './components/Profit'\nimport LoadingPie from './components/LoadingPie'\nimport StockSummaryWindows from './components/StockSumWindows'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profit/>\n      <StockSummaryWindows />\n      <FileEntry />\n      <DataSummary />\n      <TransactionList />\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: [{x:1, y: 0},{x:2, y:100}]\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      console.log(\"IN INCLUDE\")\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        sortFilter: \"date\"\n      }\n    case 'ADD_SUMMARY':\n    console.log(\"IN ADD_SUMMARY\");\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          var res = 0;\n          if(action.payload === state.sortFilter){\n          }\n          else{\n            if(state.sortOrder === \"DESC\"){\n              if(a[action.payload] < b[action.payload]) {\n                res = -1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = 1;\n              }\n              return res;\n            }else{\n              if(a[action.payload] < b[action.payload]) {\n                res = 1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = -1;\n              }\n              return res;\n            }\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: [\n          {x:1, y:parseFloat(action.payload)},\n          {x:2, y:parseFloat(1-action.payload)}\n        ]\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}