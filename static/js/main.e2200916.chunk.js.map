{"version":3,"sources":["components/StockPage.js","actions/index.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/LoadingPie.js","components/Profit.js","components/DataTables.js","components/StockSumWindows.js","components/graphs/OverallSummary.js","components/FileEntry.js","components/Home.js","components/graphs/StockBuySell.js","components/graphs/DividentBar.js","components/MyNavBar.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["newSummary","setSortFilter","order","type","payload","setStockpage","name","connect","dispatch","include","index","date","included","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","checked","onClick","state","transactions","TransactionsStore","setFilter","filter","className","map","item","Stock","addBuy","paid","parseFloat","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","HandleTransaction","transaction","constObject","Object","assign","addSummary","setProfit","stockMap","Map","entries","totalProfit","entry","has","set","get","summarize","values","push","renderSummary","readPercentage","ProgressBar","striped","variant","now","Math","round","y","viewBox","width","height","standalone","animate","duration","data","innerRadius","cornerRadius","labels","style","fill","datum","color","newProps","textAnchor","verticalAnchor","x","text","fontSize","DataTables","summaries","sort","a","b","divClass","pColor","to","renderWindows","getSummaries","tmp","newSummaries","fillColor","abs","label","averageTrade","totalNonZeroTrades","domainPadding","horizontal","onLoad","barRatio","dataComponents","events","onMouseOver","console","log","labelComponent","constrainToVisibleArea","pointerOrientation","centerOffset","flyoutWidth","length","angle","dx","dy","dependentAxis","tickLabels","fileReader","FileReader","addTransaction","transactionType","removeTransactions","setPercentage","percent","handleFileRead","e","preventDefault","content","result","lines","replace","split","i","accept","onChange","file","target","files","onloadend","readAsText","Home","getTransactions","stockPage","stockTransactions","buyTransactions","sellTransactions","JSON","stringify","Date","parse","all","buy","Container","lg","centerTitle","orientation","gutter","border","stroke","title","symbol","tickCount","tickValues","newTransactions","getSummary","dividents","DividentSummary","padding","tickFormat","Row","Col","md","summaryCells","renderTransactionsTable","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","items","exact","path","component","StockPage","App","src","integrity","crossorigin","defaultState","sortFilter","sortOrder","transactionsReducer","action","summary","res","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.e2200916.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {ShareSummary} from './Stock'\nimport Transaction from './Transaction'\nimport { FaArrowDown } from 'react-icons/fa'\nimport Stock from './Stock'\nimport { HandleTransaction } from './DataSummary'\nimport { setSortFilter } from '../actions'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StockBuySell from './graphs/StockBuySell';\nimport DividentBar from './graphs/DividentBar';\n\nvar newSummary;\n\nconst renderTransactionsTable = (setFilter, name, transactions) => {\n  var summaryCells = [];\n  for(var entry of transactions){\n    if(entry.stockname === name){\n      summaryCells.push(entry);\n    }\n  }\n  if( summaryCells === [] ){\n    return ( null );\n  }\n  for(var entry of summaryCells){\n    if(entry.included){\n      HandleTransaction(newSummary, entry);\n    }\n  }\n  newSummary.getProfits();\n  newSummary.roundDecimals();\n  console.log(newSummary);\n  //setSummary(newSummary);\n  return(\n    <table className=\"centering\">\n      <thead>\n          <tr>\n          <th> Included </th>\n          <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n          <th> Account </th>\n          <th> Transactiontype </th>\n          <th> Name  </th>\n          <th> Amount </th>\n          <th> Price </th>\n          <th> Total </th>\n          <th> Brokerage </th>\n          <th> Currency </th>\n          <th> Id </th>\n        </tr>\n      </thead>\n      <tbody>\n        {summaryCells.map(item =>\n          <Transaction\n            {...item}\n          />\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nconst renderSummaryTable = (name) => {\n  return (\n    <table className=\"centering\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Bought</th>\n          <th>@avg</th>\n          <th>Total</th>\n          <th>Sold</th>\n          <th>@avg</th>\n          <th>Total</th>\n          <th>Dividents</th>\n          <th>Brokerage</th>\n          <th>Profit</th>\n        </tr>\n      </thead>\n      <tbody>\n        <ShareSummary {...newSummary}/>\n      </tbody>\n    </table>\n  );\n};\n\nconst StockPage = ({setFilter, name, summaries, transactions, dispatch}) => {\n  newSummary = new Stock(name);\n  return(\n    <Container>\n    <Row>\n        <Container className=\"al-itemsCenter centering inlineBlock\">\n          <Col md=\"auto\"> <StockBuySell/> </Col>\n          <Col md=\"auto\"> <DividentBar/> </Col>\n          <Col md=\"auto\"> {renderSummaryTable(name)} </Col>\n        </Container>\n    </Row>\n      <Container>\n          <br/><br/>\n          {renderTransactionsTable(setFilter, name, transactions)}\n      </Container>\n    </Container>\n  )\n}\n\nStockPage.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  name: PropTypes.string.isRequired,\n  setFilter: PropTypes.func.isRequired\n}\n\n\nconst mapStateToProps = (state) => ({\n  summaries: state.TransactionsStore.summaries,\n  transactions: state.TransactionsStore.transactions,\n  name: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockPage)\n","export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setSummary = (summary) => (\n  {\n    type: \"SET_SUMMARY\",\n    payload: summary\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n\nexport const setStockpage = (name) => ({\n  type: \"SEE_STOCK_PAGE\",\n  payload: name\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => (\n  <tr>\n    <td>\n      <input type=\"checkbox\" checked={included}\n        onClick={() => { include(index, date,included)}}\n      />\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n)\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter }) => (\n  <table className=\"centering\">\n    <thead>\n        <tr>\n        <th> Included </th>\n        <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n        <th> Account </th>\n        <th> Transactiontype </th>\n        <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n        <th> Amount </th>\n        <th> Price </th>\n        <th> Total </th>\n        <th> Brokerage </th>\n        <th> Currency </th>\n        <th> Id </th>\n      </tr>\n    </thead>\n    <tbody>\n      {transactions.map(item =>\n        <Transaction\n          {...item}\n        />\n      )}\n    </tbody>\n  </table>\n)\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n}\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ? parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*parseFloat(this.avgBought)) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\n\nexport const HandleTransaction = (stock, transaction) => {\n  var constObject = Object.assign({}, transaction);\n  switch(constObject.transactiontype){\n    case 'Köp':\n      stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n      break;\n    case 'Sälj':\n      stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n      break;\n    case 'Utdelning':\n      stock.addDividents(constObject.amount, constObject.price);\n      break;\n    default: break;\n  }\n};\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, dispatch}) => {\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          HandleTransaction(stock, entry);\n        }\n        return null;\n      });\n      return null;\n  };\n\n  const renderSummary = (entries) => {\n    for(var entry of stockMap.values()){\n      entries.push(entry);\n    }\n    return(\n      entries.map(entry => {\n          entry.getProfits();\n          entry.roundDecimals();\n          totalProfit += parseFloat(entry.returnProfit())\n          setProfit(totalProfit)\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    summarize(transactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th onClick={() => setFilter(\"stockname\")}>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary(entries)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { VictoryPie, VictoryAnimation, VictoryLabel } from 'victory'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\nconst LoadingPie = ({readPercentage}) => {\n\n  return(\n    <div>\n      <ProgressBar striped variant=\"success\" now={Math.round(readPercentage[0].y*100)} />\n      <svg viewBox=\"0 0 400 400\" width=\"10%\" height=\"10%\">\n        <VictoryPie\n          standalone={false}\n          animate={{ duration: 5000 }}\n          width={400} height={400}\n          data={readPercentage}\n          innerRadius={120}\n          cornerRadius={25}\n          labels={() => null}\n          style={{\n            data: { fill: ({ datum }) => {\n              const color = (datum.y*100) > 30 ? \"green\" : \"red\";\n              return datum.y*100 > 99 ? color : \"transparent\";\n            }\n            }\n          }}\n        />\n        <VictoryAnimation duration={1000} data={readPercentage}>\n          {(newProps) => {\n            return (\n              <VictoryLabel\n                textAnchor=\"middle\" verticalAnchor=\"middle\"\n                x={200} y={200}\n                text={`${Math.round(readPercentage[0].y*100)}%`}\n                style={{ fontSize: 45 }}\n              />\n            );\n          }}\n        </VictoryAnimation>\n      </svg>\n    </div>\n  )\n}\n\nLoadingPie.propTypes = {\n  readPercentage: PropTypes.number.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  readPercentage: state.TransactionsStore.readPercentage\n})\n\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LoadingPie)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Profit = ({profit, dispatch}) => {\n  return (\n  <h2> Total Profit: {profit} </h2>\n  )\n}\n\nProfit.propTypes = {\n  profit: PropTypes.number.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit.toFixed(2))\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react'\nimport TransactionList from './TransactionList'\nimport DataSummary from './DataSummary'\nimport Profit from './Profit'\n\nconst DataTables = () => {\n  return(\n    <div>\n      <Profit/>\n      <DataSummary/>\n      <TransactionList/>\n    </div>\n  )\n}\n\nexport default DataTables\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {FaCoins, FaEllipsisH} from 'react-icons/fa'\nimport {setStockpage} from '../actions'\nimport {Link} from 'react-router-dom'\n\n\nconst renderWindows = (entries, setStockpage) => {\n  /*\n  return (\n    <div className=\"centering inlineBlock StockSummaryWindow SumWinProfit\">\n      <div className=\"rubricArea\"> <h3> ATLA B </h3> </div>\n      <hr className=\"sumAreaDivider\"></hr>\n      <div className=\"profitArea\">\n        <div className=\"inlineBlock\">\n          <p> Profit  <FaCoins className=\"sumWindowCoins\"/></p>\n        </div>\n      </div>\n    </div>\n  ) */\n  return(\n    entries.map(entry => {\n      var divClass =  parseFloat(entry.profit) >= 0 ? \"SumWinProfit\" : \"SumLossProfit\";\n      var pColor = parseFloat(entry.profit) >= 0 ? \"greenText\" : \"redText\";\n        return (\n          <div className={\"centering inlineBlock StockSummaryWindow \" + divClass}>\n            <div className=\"rubricArea\"> <h3> {entry.name} </h3> </div>\n            <hr className=\"sumAreaDivider\"></hr>\n            <div className=\"profitArea\">\n              <div className=\"inlineBlock\">\n                <p className={pColor}> {entry.profit}  <FaCoins className=\"sumWindowCoins\"/></p>\n              </div>\n              <br/>\n              <Link onClick={() => setStockpage(entry.name)} to=\"/StockPage\">\n                <FaEllipsisH className=\"moreButton\"/>\n              </Link>\n            </div>\n          </div>\n        )\n    })\n  )\n};\n\nconst StockSummaryWindows = ({summaries, setStockpage, dispatch}) => {\n  return (\n    <div>\n      {renderWindows(summaries, setStockpage)}\n    </div>\n  )\n}\n\nStockSummaryWindows.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  setStockpage: PropTypes.func.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setStockpage: (name) => dispatch(setStockpage(name))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StockSummaryWindows)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis, VictoryScatter, VictoryGroup, VictoryTooltip} from 'victory'\n\nconst OverallSummary = ({summaries, dispatch}) => {\n  var averageTrade = 500;\n  var totalNonZeroTrades = 0;\n  for(var entry of summaries){\n    if(parseFloat(entry.profit) > 0 || parseFloat(entry.profit) < 0){\n      averageTrade += parseFloat(entry.profit);\n      totalNonZeroTrades++;\n    }\n  }\n  averageTrade = averageTrade/totalNonZeroTrades;\n  var averageColor = averageTrade > 0 ? \"#4CAF50\" : \"#BB1313\";\n  return (\n    <div className=\"centering overAllChart\">\n      <VictoryChart\n        domainPadding={{ x: 10 }}\n      >\n        <VictoryBar horizontal\n          animate={{\n            duration: 2000,\n            onLoad: { duration: 1000 }\n          }}\n          barRatio={0.8}\n          dataComponents={\n            <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n          }\n          style={{\n            data: {fill: ({ datum }) => datum.fill},\n            labels: {fill: \"black\"}\n          }}\n          data={summaries}\n          labelComponent={\n            <VictoryTooltip\n              style={{\n                 fontSize: 5,\n              }}\n              constrainToVisibleArea={false}\n              pointerOrientation=\"left\"\n              cornerRadius={0}\n              centerOffset={{x:0, y:-10}}\n              flyoutWidth={({datum}) => datum.label.length*5+30}\n              labelComponent={\n                <VictoryLabel\n                   style={{\n                      fontSize: 7,\n                   }}\n                   angle={0}\n                   verticalAnchor=\"middle\"\n                   textAnchor=\"middle\"\n                   dx={0}\n                   dy={0}\n                   text={({datum}) => datum.label + \" : \" + datum.y }\n                 />\n              }\n            />\n          }\n        />\n        <VictoryAxis dependentAxis\n          style={{\n             tickLabels: {fontSize: 10}\n          }}\n        />\n        <VictoryAxis\n          style={{ tickLabels: {fill: \"none\"}}}\n        />\n      </VictoryChart>\n    </div>\n  );\n}\n\nOverallSummary.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  var tmp = [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newSummaries = [];\n  var index = 0;\n  for(var entry of tmp){\n    if(entry.profit === 0){\n      continue\n    }\n    var fillColor = \"#4CAF50\"\n    if(entry.profit < 0) {\n      fillColor = \"#BB1313\"\n    }\n    newSummaries.push({x: index, y: Math.abs(entry.profit), fill: fillColor, label: entry.name})\n    entry = null;\n    index++;\n  }\n  tmp = null;\n  return newSummaries;\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage } from '../actions'\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, dispatch}) => {\n  const handleFileRead = (e) => {\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n        lines[i] = null;\n        entry = null;\n      }\n    }\n\n  const handleFileChosen = (file) => {\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0], addTransaction)}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport StockSummaryWindows from './StockSumWindows'\nimport OverallSummary from './graphs/OverallSummary'\nimport FileEntry from './FileEntry'\nimport Profit from './Profit'\nimport DataSummary from './DataSummary'\n\n\nconst Home = () => {\n  return(\n    <div>\n      <FileEntry />\n      <Profit/>\n      <OverallSummary/>\n      <StockSummaryWindows />\n      <DataSummary/>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryLegend, VictoryStack, VictoryLine, VictoryBar, Bar, VictoryLabel, VictoryAxis, VictoryScatter, VictoryGroup, VictoryTooltip} from 'victory'\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst StockBuySell = ({transactions, stockPage, dispatch}) => {\n  var selectedObject = transactions.all[0] != null ? transactions.all[0] : {label: \"\"};\n  return (\n        <Container lg={7} className=\"inlineBlock overAllChart\">\n          <VictoryChart width={800} height={500}>\n          <VictoryLegend x={170} y={10}\n              centerTitle\n              orientation=\"horizontal\"\n              gutter={20}\n              style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\n              data={[\n                { name: \"Buy\", symbol: { fill: \"#4CAF50\" } },\n                { name: \"Sell\", symbol: { fill: \"#BB1313\" } }\n              ]}\n            />\n            <VictoryScatter\n                    data={transactions.all}\n                    animate={{\n                      duration: 500,\n                      onLoad: { duration: 1000 }\n                    }}\n                    style={{\n                      data: {fill: ({ datum }) => datum.fill},\n                      labels: {fill: \"black\"}\n                    }}\n                    labelComponent={\n                      <VictoryTooltip\n                        style={{\n                           fontSize: 5,\n                        }}\n                        constrainToVisibleArea={true}\n                        pointerOrientation=\"left\"\n                        cornerRadius={0}\n                        centerOffset={{x:0, y:0}}\n                        labelComponent={\n                          <VictoryLabel\n                             style={{\n                                fontSize: 7,\n                             }}\n                             angle={0}\n                             verticalAnchor=\"middle\"\n                             textAnchor=\"middle\"\n                             dx={0}\n                             dy={0}\n                             text={({datum}) => datum.label}\n                           />\n                        }\n                      />\n                    }\n              />\n              <VictoryLine\n                data={transactions.buy}\n                style={\n                  {\n                    data: {stroke: \"#4CAF50\"}\n                  }\n                }\n              />\n              <VictoryLine\n                data={transactions.sell}\n                style={\n                  {\n                    data: {stroke: \"#BB1313\"}\n                  }\n                }\n              />\n              <VictoryAxis dependentAxis\n                orientation=\"left\"\n              />\n              <VictoryAxis\n                orientation=\"bottom\"\n                tickCount={2}\n                tickValues={[transactions.all[0], transactions.all[transactions.length-1]]}\n              />\n          </VictoryChart>\n        </Container>\n  );\n}\n\nStockBuySell.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  stockPage: PropTypes.string.isRequired\n}\n\nconst getTransactions = (transactions, stockPage) => {\n  var stockTransactions = [];\n  var buyTransactions = [];\n  var sellTransactions = [];\n  for(var entry of transactions){\n    if(entry.stockname === stockPage && entry.included === true){\n      var fillColor = entry.transactiontype === (\"Köp\" || \"Utdelning\") ? \"#4CAF50\" : \"#BB1313\"\n      stockTransactions.push({x: entry.date, y: parseFloat(entry.price), label: JSON.stringify(entry,null,\"\\n\"), fill: fillColor, index: entry.index });\n      if(fillColor == \"#4CAF50\"){\n        buyTransactions.push({x: entry.date, y: parseFloat(entry.price), fill: fillColor, index: entry.index})\n      }else{\n        sellTransactions.push({x: entry.date, y: parseFloat(entry.price), fill: fillColor, index: entry.index})\n      }\n    }\n  }\n  // TODO: Sort by Date Ascending order. Doesnt work yet, think it needs to compare date object not string\n  stockTransactions.sort((a,b) => {\n      if(Date.parse(a.x) < Date.parse(b.x)){\n        return -1;\n      }else if(Date.parse(a.x) > Date.parse(b.x)){\n        return 1;\n      }else{\n        return 0;\n      }\n  })\n  return {all: stockTransactions, buy: buyTransactions, sell: sellTransactions};\n}\n\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  stockPage: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockBuySell)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis, VictoryTooltip} from 'victory'\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst DividentBar = ({transactions, dividents, dispatch}) => {\n  var DividentSummary=[{x: \"dividents\",y: dividents, fill: \"#4CAF50\"}];\n  return (\n    <div className=\"centering overallSummary overAllChart\">\n        <VictoryChart>\n            <VictoryBar\n            animate={{\n                duration: 2000,\n                onLoad: { duration: 1000 }\n            }}\n            \n            dataComponents={\n                <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n            }\n            style={{\n                data: {fill: ({ datum }) => datum.fill, width: 200, height: 400},\n            }}\n            data={DividentSummary}\n            labels={({datum}) => datum.y}\n            labelComponent={\n                <VictoryLabel style={{\n                    fontSize: 50, fill:\"black\"    \n                }} \n                textAnchor=\"middle\" verticalAnchor=\"end\"\n                dy={0}\n                />\n            }\n            />\n            <VictoryAxis  style={{tickLabels: {fontSize: 25, padding :5}}}/>\n            <VictoryAxis tickFormat={() => ''}/>\n        </VictoryChart>\n    </div>\n  );\n}\n\nDividentBar.propTypes = {\n    transactions: PropTypes.arrayOf(PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      account: PropTypes.string.isRequired,\n      transactiontype: PropTypes.string.isRequired,\n      stockname: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      total: PropTypes.string.isRequired,\n      brokerage: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      included: PropTypes.bool.isRequired,\n      index: PropTypes.number.isRequired\n    }).isRequired).isRequired,\n    dividents: PropTypes.number.isRequired,\n    addSummary: PropTypes.func.isRequired\n  }\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return 1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newTransactions = [];\n  var index = 0;\n  for(var entry of tmp){\n    if(entry.name === name && entry.transactiontype === \"Utdelning\"){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst getSummary = (summaries, name) => {\n    var result = 0;\n    for(var entry of summaries){\n        if(entry.name === name){\n            return entry.divident;\n        }\n    }\n    return 0; // No summary with the name we are looking for found \n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  dividents: getSummary(state.TransactionsStore.summaries, state.TransactionsStore.stockPage)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DividentBar)\n","import Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {BrowserRouter, HashRouter, Route, Switch, Link} from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap';\n\nimport DataTables from './DataTables'\nimport Home from './Home'\nimport StockPage from './StockPage'\nimport { setStockpage } from '../actions'\n\nconst MyNavBar = ({setStockpage, summaries, dispatch}) => {\n\n  const items = (summaries) => {\n    return(\n      summaries.map(entry => {\n        var url = \"/StockPage\";\n        return(\n          <NavDropdown.Item className=\"navCenter\"><Link onClick={() => setStockpage(entry.name)} to={url}>{entry.name}</Link></NavDropdown.Item>\n        )\n      })\n    )\n  }\n\n  return(\n    <BrowserRouter>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/Home\">Trade Summary</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto navCenter\">\n            <Link className=\"navCenter\" to=\"/Home\">Home</Link>\n            <Link className=\"navCenter\" to=\"/DataTables\">Data Tables</Link>\n            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n              {items(summaries)}\n            </NavDropdown>\n          </Nav>\n          <Nav>\n            <Link className=\"navCenter\" to=\"#About\">About</Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Switch>\n        <Route exact path=\"/Home\" component={Home} />\n        <Route path=\"/DataTables\" component={DataTables} />\n        <Route path=\"/StockPage\" component={StockPage} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nMyNavBar.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"name\"]) < parseFloat(b[\"name\"])){\n        return 1;\n      }else if(parseFloat(a[\"name\"]) > parseFloat(b[\"name\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setStockpage: (name) => dispatch(setStockpage(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNavBar);\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TransactionList from './components/TransactionList'\nimport DataSummary from './components/DataSummary'\nimport LoadingPie from './components/LoadingPie'\nimport MyNavBar from './components/MyNavBar'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n    integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\n    integrity=\"sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"\n    integrity=\"sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm\"\n    crossorigin=\"anonymous\"></script>\n\n      <MyNavBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: [{x:1, y: 0},{x:2, y:100}],\n  stockPage: \"\"\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      console.log(\"IN INCLUDE\")\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        sortFilter: \"date\"\n      }\n    case 'ADD_SUMMARY':\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_SUMMARY':\n      return{\n        ...state,\n        summaries:\n         state.summaries.map(summary =>\n          (summary.name === action.payload.name)\n            ? action.payload\n            : summary\n          )\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          var res = 0;\n          if(action.payload === state.sortFilter){\n            return res;\n          }\n          else{\n            if(state.sortOrder === \"DESC\"){\n              if(a[action.payload] < b[action.payload]) {\n                res = -1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = 1;\n              }\n              return res;\n            }else{\n              if(a[action.payload] < b[action.payload]) {\n                res = 1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = -1;\n              }\n              return res;\n            }\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: [\n          {x:1, y:parseFloat(action.payload)},\n          {x:2, y:parseFloat(1-action.payload)}\n        ]\n      }\n    case 'SEE_STOCK_PAGE':\n      return{\n        ...state,\n        stockPage: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}