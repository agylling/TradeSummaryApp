{"version":3,"sources":["actions/index.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","components/DataTables.js","components/StockSumWindows.js","components/graphs/OverallSummary.js","components/FileEntry.js","components/Home.js","components/graphs/StockBuySell.js","components/graphs/DividentBar.js","components/StockPage.js","components/MyNavBar.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["setSortFilter","order","type","payload","setStockpage","name","connect","dispatch","include","index","date","included","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","checked","onClick","getNewTransactions","transactions","newTransactions","entry","push","state","TransactionsStore","setFilter","filter","copyOfTransactions","className","map","item","Stock","addBuy","paid","parseFloat","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","addSummary","setProfit","stockMap","Map","entries","totalProfit","has","set","get","transaction","constObject","Object","assign","HandleTransaction","summarize","values","renderSummary","DataTables","Container","renderWindows","setShowExtraStock","showExtraStock","arrowIcon","divClass","pColor","Row","Col","to","extraInfo","summaries","sort","a","b","showExtraStockInfo","getSummaries","tmp","newSummaries","fillColor","x","y","Math","abs","fill","label","averageTrade","totalNonZeroTrades","domainPadding","horizontal","animate","duration","onLoad","barRatio","dataComponents","events","onMouseOver","console","log","style","data","datum","labels","labelComponent","fontSize","constrainToVisibleArea","pointerOrientation","cornerRadius","centerOffset","flyoutWidth","length","angle","verticalAnchor","textAnchor","dx","dy","text","dependentAxis","tickLabels","fileReader","FileReader","addTransaction","transactionType","removeTransactions","setPercentage","percent","handleFileRead","e","preventDefault","content","result","lines","replace","split","i","accept","onChange","file","target","files","onloadend","readAsText","Home","lg","md","sd","getTransactions","stockPage","stockTransactions","buyTransactions","sellTransactions","JSON","stringify","Date","parse","all","buy","centerTitle","orientation","gutter","border","stroke","title","symbol","tickCount","tickValues","getSummary","dividents","DividentSummary","width","height","padding","tickFormat","sm","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","Item","items","exact","from","path","component","StockPage","App","src","integrity","crossorigin","defaultState","sortFilter","sortOrder","readPercentage","transactionsReducer","action","summary","res","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.80811133.chunk.js","sourcesContent":["export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setSummary = (summary) => (\n  {\n    type: \"SET_SUMMARY\",\n    payload: summary\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n\nexport const setStockpage = (name) => ({\n  type: \"SEE_STOCK_PAGE\",\n  payload: name\n})\n\nexport const showExtraStockInfo = (name) => ({\n  type: \"SHOW_EXTRA_STOCK_INFO\",\n  payload: name\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => (\n  <tr>\n    <td>\n      <input type=\"checkbox\" checked={included}\n        onClick={() => { include(index, date,included)}}\n      />\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n)\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter, name}) => {\n  var copyOfTransactions = [...transactions];\n  if(name !== \"\"){\n    copyOfTransactions = getNewTransactions(transactions, name);\n  }\n  return(\n    <table className=\"centering\">\n      <thead>\n          <tr>\n          <th> Included </th>\n          <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n          <th> Account </th>\n          <th> Transactiontype </th>\n          <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n          <th> Amount </th>\n          <th> Price </th>\n          <th> Total </th>\n          <th> Brokerage </th>\n          <th> Currency </th>\n          <th> Id </th>\n        </tr>\n      </thead>\n      <tbody>\n        {copyOfTransactions.map(item =>\n          <Transaction\n            {...item}\n          />\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  name: PropTypes.string.isRequired\n}\n\nexport const getNewTransactions = (transactions, name) => {\n  var newTransactions = [];\n  for(var entry of transactions){\n    if(entry.stockname === name){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ? parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*parseFloat(this.avgBought)) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\nimport {getNewTransactions} from './TransactionList'\n\nexport const HandleTransaction = (stock, transaction) => {\n  var constObject = Object.assign({}, transaction);\n  switch(constObject.transactiontype){\n    case 'Köp':\n      stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n      break;\n    case 'Sälj':\n      stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n      break;\n    case 'Utdelning':\n      stock.addDividents(constObject.amount, constObject.price);\n      break;\n    default: break;\n  }\n};\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, name, dispatch}) => {\n  var copyOfTransactions = [...transactions];\n  // If we havespecified a particular stock to review summary on, disregard the rest\n  if(name !== \"\" && name !== \"all\"){\n    // Function is exported from TransactionList\n    copyOfTransactions = getNewTransactions(copyOfTransactions, name);\n  }\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          HandleTransaction(stock, entry);\n        }\n        return null;\n      });\n      return null;\n  };\n\n  const renderSummary = (entries) => {\n    for(var entry of stockMap.values()){\n      entries.push(entry);\n    }\n    return(\n      entries.map(entry => {\n          entry.getProfits();\n          entry.roundDecimals();\n          totalProfit += parseFloat(entry.returnProfit())\n          setProfit(totalProfit)\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    summarize(copyOfTransactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th onClick={() => setFilter(\"stockname\")}>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary(entries)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Profit = ({profit, dispatch}) => {\n  return (\n  <h2> Total Profit: {profit} </h2>\n  )\n}\n\nProfit.propTypes = {\n  profit: PropTypes.number.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit.toFixed(2))\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react'\nimport TransactionList from './TransactionList'\nimport DataSummary from './DataSummary'\nimport Profit from './Profit'\nimport {Container} from 'react-bootstrap'\n\nconst DataTables = () => {\n  return(\n    <Container>\n      <Profit/>\n      <DataSummary name=\"\"/>\n      <TransactionList name=\"\"/>\n    </Container>\n  )\n}\n\nexport default DataTables\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {FaCoins, FaEllipsisH, FaAngleUp, FaAngleDown, FaListUl} from 'react-icons/fa'\nimport {setStockpage, showExtraStockInfo} from '../actions'\nimport {Link} from 'react-router-dom'\nimport { Container, Row, Col, } from 'react-bootstrap';\nimport TransactionList from './TransactionList'\n\nconst renderTransactions = (name) => {\n\n  return (\n    <Row className={\"transactionList\"}>\n      <Col>\n       <TransactionList name={name}/>\n      </Col>\n    </Row>\n  )\n}\n\nconst extraInfo = (entry, showExtraStock) => {\n  if(showExtraStock === entry.name){\n    return (\n      <Container>\n        <Row>\n          <Col> <p> B: {entry.sharesBought} @ {entry.avgBought} </p> </Col>\n          <Col> <p> S: {entry.sharesSold} @ {parseFloat(parseFloat(entry.sold)/parseFloat(entry.sharesSold)).toFixed(2)} </p> </Col>\n          <Col> <p> Dividents: {entry.divident} </p> </Col>\n        </Row>\n      </Container>\n    )\n  }else{\n    return null\n  }\n}\n\n\nconst renderWindows = (entries, setStockpage, setShowExtraStock, showExtraStock) => {\n  return(\n    entries.map(entry => {\n      const arrowIcon = showExtraStock === entry.name ? \n        <FaAngleUp onClick={() => setShowExtraStock(\"\") }></FaAngleUp> : \n        <FaAngleDown onClick={() => setShowExtraStock(entry.name) }></FaAngleDown>;\n      var divClass =  parseFloat(entry.profit) >= 0 ? \"SumWinProfit\" : \"SumLossProfit\";\n      var pColor = parseFloat(entry.profit) >= 0 ? \"greenText\" : \"redText\";\n        return (\n          <Container className={\"centering rubricArea inlineBlock StockSummaryWindow \" + divClass}>\n            <Row>\n              <Col> <p> {entry.name} </p> </Col>\n              <Col>\n                <p className={pColor}> {entry.profit}  <FaCoins className=\"sumWindowCoins\"/></p>\n              </Col>\n              <Col>\n                {arrowIcon}\n                <Link className=\"moreButton\" onClick={() => setStockpage(entry.name)} to=\"/StockPage\">\n                  <FaListUl className=\"moreButton\"/>\n                </Link>\n              </Col>\n            </Row>\n              {extraInfo(entry, showExtraStock)}\n          </Container>\n        )\n    })\n  )\n};\n\nconst StockSummaryWindows = ({summaries, setStockpage, setShowExtraStock, showExtraStock, dispatch}) => {\n  return (\n    <Container>\n      {renderWindows(summaries, setStockpage, setShowExtraStock, showExtraStock)}\n    </Container>\n  )\n}\n\nStockSummaryWindows.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  setStockpage: PropTypes.func.isRequired,\n  setShowExtraStock: PropTypes.func.isRequired,\n  showExtraStock: PropTypes.string.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries),\n  showExtraStock: state.TransactionsStore.showExtraStock,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setStockpage: (name) => dispatch(setStockpage(name)),\n  setShowExtraStock: (name) => dispatch(showExtraStockInfo(name))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StockSummaryWindows)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis, VictoryTooltip} from 'victory'\nimport { Container } from 'react-bootstrap'\n\nconst OverallSummary = ({summaries, dispatch}) => {\n  var averageTrade = 500;\n  var totalNonZeroTrades = 0;\n  for(var entry of summaries){\n    if(parseFloat(entry.profit) > 0 || parseFloat(entry.profit) < 0){\n      averageTrade += parseFloat(entry.profit);\n      totalNonZeroTrades++;\n    }\n  }\n  averageTrade = averageTrade/totalNonZeroTrades;\n  var averageColor = averageTrade > 0 ? \"#4CAF50\" : \"#BB1313\";\n  return (\n    <Container className=\"centering overAllChart\">\n      <VictoryChart\n        domainPadding={{ x: 10 }}\n      >\n        <VictoryBar horizontal\n          animate={{\n            duration: 2000,\n            onLoad: { duration: 1000 }\n          }}\n          barRatio={0.8}\n          dataComponents={\n            <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n          }\n          style={{\n            data: {fill: ({ datum }) => datum.fill},\n            labels: {fill: \"black\"}\n          }}\n          data={summaries}\n          labelComponent={\n            <VictoryTooltip\n              style={{\n                 fontSize: 5,\n              }}\n              constrainToVisibleArea={false}\n              pointerOrientation=\"left\"\n              cornerRadius={0}\n              centerOffset={{x:0, y:-10}}\n              flyoutWidth={({datum}) => datum.label.length*5+30}\n              labelComponent={\n                <VictoryLabel\n                   style={{\n                      fontSize: 7,\n                   }}\n                   angle={0}\n                   verticalAnchor=\"middle\"\n                   textAnchor=\"middle\"\n                   dx={0}\n                   dy={0}\n                   text={({datum}) => datum.label + \" : \" + datum.y }\n                 />\n              }\n            />\n          }\n        />\n        <VictoryAxis dependentAxis\n          style={{\n             tickLabels: {fontSize: 10}\n          }}\n        />\n        <VictoryAxis\n          style={{ tickLabels: {fill: \"none\"}}}\n        />\n      </VictoryChart>\n    </Container>\n  );\n}\n\nOverallSummary.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  var tmp = [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newSummaries = [];\n  var index = 0;\n  for(var entry of tmp){\n    if(entry.profit === 0){\n      continue\n    }\n    var fillColor = \"#4CAF50\"\n    if(entry.profit < 0) {\n      fillColor = \"#BB1313\"\n    }\n    newSummaries.push({x: index, y: Math.abs(entry.profit), fill: fillColor, label: entry.name})\n    entry = null;\n    index++;\n  }\n  tmp = null;\n  return newSummaries;\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage } from '../actions'\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, dispatch}) => {\n  const handleFileRead = (e) => {\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n        lines[i] = null;\n        entry = null;\n      }\n    }\n\n  const handleFileChosen = (file) => {\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0], addTransaction)}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport StockSummaryWindows from './StockSumWindows'\nimport OverallSummary from './graphs/OverallSummary'\nimport FileEntry from './FileEntry'\nimport Profit from './Profit'\nimport DataSummary from './DataSummary'\nimport {Container, Row, Col} from 'react-bootstrap'\n\nconst Home = () => {\n  return(\n    <Container>\n      <Container>\n        <Row>\n          <Col>\n          <FileEntry />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={8} md={8} sd={12}>\n            <OverallSummary/>\n          </Col>\n          <Col className={\"centering\"}>\n            <Profit/>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n             <StockSummaryWindows />\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <DataSummary name=\"\"/>\n      </Container>\n    </Container>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryLegend, VictoryLine, VictoryLabel, VictoryAxis, VictoryScatter, VictoryTooltip} from 'victory'\nimport {Col } from 'react-bootstrap';\n\nconst StockBuySell = ({transactions, stockPage, dispatch}) => {\n  return (\n        <Col lg=\"8\">\n          <VictoryChart>\n          <VictoryLegend x={170} y={10}\n              centerTitle\n              orientation=\"horizontal\"\n              gutter={20}\n              style={{ border: { stroke: \"black\" }, title: {fontSize: 20 } }}\n              data={[\n                { name: \"Buy\", symbol: { fill: \"#4CAF50\" } },\n                { name: \"Sell\", symbol: { fill: \"#BB1313\" } }\n              ]}\n            />\n            <VictoryScatter\n                    data={transactions.all}\n                    animate={{\n                      duration: 500,\n                      onLoad: { duration: 1000 }\n                    }}\n                    style={{\n                      data: {fill: ({ datum }) => datum.fill},\n                      labels: {fill: \"black\"}\n                    }}\n                    labelComponent={\n                      <VictoryTooltip\n                        style={{\n                           fontSize: 5,\n                        }}\n                        constrainToVisibleArea={true}\n                        pointerOrientation=\"left\"\n                        cornerRadius={0}\n                        centerOffset={{x:0, y:0}}\n                        labelComponent={\n                          <VictoryLabel\n                             style={{\n                                fontSize: 7,\n                             }}\n                             angle={0}\n                             verticalAnchor=\"middle\"\n                             textAnchor=\"middle\"\n                             dx={0}\n                             dy={0}\n                             text={({datum}) => datum.label}\n                           />\n                        }\n                      />\n                    }\n              />\n              <VictoryLine\n                data={transactions.buy}\n                style={\n                  {\n                    data: {stroke: \"#4CAF50\"}\n                  }\n                }\n              />\n              <VictoryLine\n                data={transactions.sell}\n                style={\n                  {\n                    data: {stroke: \"#BB1313\"}\n                  }\n                }\n              />\n              <VictoryAxis dependentAxis\n                orientation=\"left\"\n              />\n              <VictoryAxis\n                orientation=\"bottom\"\n                tickCount={2}\n                tickValues={[transactions.all[0], transactions.all[transactions.length-1]]}\n              />\n          </VictoryChart>\n        </Col>\n  );\n}\n\nStockBuySell.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  stockPage: PropTypes.string.isRequired\n}\n\nconst getTransactions = (transactions, stockPage) => {\n  var stockTransactions = [];\n  var buyTransactions = [];\n  var sellTransactions = [];\n  for(var entry of transactions){\n    if(entry.stockname === stockPage && entry.included === true){\n      var fillColor = entry.transactiontype === (\"Köp\" || \"Utdelning\") ? \"#4CAF50\" : \"#BB1313\"\n      stockTransactions.push({x: entry.date, y: parseFloat(entry.price), label: JSON.stringify(entry,null,\"\\n\"), fill: fillColor, index: entry.index });\n      if(fillColor === \"#4CAF50\"){\n        buyTransactions.push({x: entry.date, y: parseFloat(entry.price), fill: fillColor, index: entry.index})\n      }else{\n        sellTransactions.push({x: entry.date, y: parseFloat(entry.price), fill: fillColor, index: entry.index})\n      }\n    }\n  }\n  // TODO: Sort by Date Ascending order. Doesnt work yet, think it needs to compare date object not string\n  stockTransactions.sort((a,b) => {\n      if(Date.parse(a.x) < Date.parse(b.x)){\n        return -1;\n      }else if(Date.parse(a.x) > Date.parse(b.x)){\n        return 1;\n      }else{\n        return 0;\n      }\n  })\n  return {all: stockTransactions, buy: buyTransactions, sell: sellTransactions};\n}\n\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  stockPage: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockBuySell)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis} from 'victory'\n\nconst DividentBar = ({transactions, dividents, dispatch}) => {\n  var DividentSummary=[{x: \"dividents\",y: dividents, fill: \"#4CAF50\"}];\n  return (\n        <div className=\"centering overAllChart\">\n        <VictoryChart>\n            <VictoryBar\n            animate={{\n                duration: 2000,\n                onLoad: { duration: 1000 }\n            }}\n            \n            dataComponents={\n                <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n            }\n            style={{\n                data: {fill: ({ datum }) => datum.fill, width: 200, height: 400},\n            }}\n            data={DividentSummary}\n            labels={({datum}) => datum.y}\n            labelComponent={\n                <VictoryLabel style={{\n                    fontSize: 50, fill:\"black\"    \n                }} \n                textAnchor=\"middle\" verticalAnchor=\"end\"\n                dy={0}\n                />\n            }\n            />\n            <VictoryAxis  style={{tickLabels: {fontSize: 25, padding :5}}}/>\n            <VictoryAxis tickFormat={() => ''}/>\n        </VictoryChart>\n        </div>\n  );\n}\n\nDividentBar.propTypes = {\n    transactions: PropTypes.arrayOf(PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      account: PropTypes.string.isRequired,\n      transactiontype: PropTypes.string.isRequired,\n      stockname: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      total: PropTypes.string.isRequired,\n      brokerage: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      included: PropTypes.bool.isRequired,\n      index: PropTypes.number.isRequired\n    }).isRequired).isRequired,\n    dividents: PropTypes.number.isRequired,\n    addSummary: PropTypes.func.isRequired\n  }\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return 1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newTransactions = [];\n  for(var entry of tmp){\n    if(entry.name === name && entry.transactiontype === \"Utdelning\"){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst getSummary = (summaries, name) => {\n    for(var entry of summaries){\n        if(entry.name === name){\n            return entry.divident;\n        }\n    }\n    return 0; // No summary with the name we are looking for found \n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  dividents: getSummary(state.TransactionsStore.summaries, state.TransactionsStore.stockPage)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DividentBar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StockBuySell from './graphs/StockBuySell';\nimport DividentBar from './graphs/DividentBar';\nimport DataSummary from './DataSummary';\nimport TransactionList from './TransactionList'\n\n\nconst StockPage = ({name, dispatch}) => {\n  return(\n    <Container className={\"fullScreenWidth\"}>\n      <Row>\n        <Col lg={5} md={12} sm={12}> \n          <Col> <DataSummary name={name}/></Col>\n          <Col md=\"auto\"> <StockBuySell/> </Col>\n          <Col md=\"auto\"> <DividentBar/> </Col>\n        </Col>\n        <Col lg={7} md={12} sm={12}> \n          <TransactionList name={name}/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nStockPage.propTypes = {\n  name: PropTypes.string.isRequired\n}\n\n\nconst mapStateToProps = (state) => ({\n  name: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockPage)\n","import Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {BrowserRouter, Route, Switch, Link, Redirect} from 'react-router-dom'\n\nimport DataTables from './DataTables'\nimport Home from './Home'\nimport StockPage from './StockPage'\nimport { setStockpage } from '../actions'\n\nconst MyNavBar = ({setStockpage, summaries, dispatch}) => {\n\n  const items = (summaries) => {\n    return(\n      summaries.map(entry => {\n        var url = \"/StockPage\";\n        return(\n          <NavDropdown.Item className=\"navCenter\"><Link onClick={() => setStockpage(entry.name)} to={url}>{entry.name}</Link></NavDropdown.Item>\n        )\n      })\n    )\n  }\n\n  return(\n    <BrowserRouter>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/Home\">Trade Summary</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto navCenter\">\n            <Link className=\"navCenter\" to=\"/Home\">Home</Link>\n            <Link className=\"navCenter\" to=\"/DataTables\">Data Tables</Link>\n            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n              {items(summaries)}\n            </NavDropdown>\n          </Nav>\n          <Nav>\n            <Link className=\"navCenter\" to=\"#About\">About</Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/Home\" />\n        <Route exact path=\"/Home\" component={Home} />\n        <Route path=\"/DataTables\" component={DataTables} />\n        <Route path=\"/StockPage\" component={StockPage} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nMyNavBar.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"name\"]) < parseFloat(b[\"name\"])){\n        return 1;\n      }else if(parseFloat(a[\"name\"]) > parseFloat(b[\"name\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setStockpage: (name) => dispatch(setStockpage(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNavBar);\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MyNavBar from './components/MyNavBar'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n    integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\n    integrity=\"sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"\n    integrity=\"sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm\"\n    crossorigin=\"anonymous\"></script>\n\n      <MyNavBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: [{x:1, y: 0},{x:2, y:100}],\n  stockPage: \"\",\n  showExtraStock: \"\" // Decides which stock should render extra information\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        sortFilter: \"date\"\n      }\n    case 'ADD_SUMMARY':\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_SUMMARY':\n      return{\n        ...state,\n        summaries:\n         state.summaries.map(summary =>\n          (summary.name === action.payload.name)\n            ? action.payload\n            : summary\n          )\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          var res = 0;\n          if(action.payload === state.sortFilter){\n            return res;\n          }\n          else{\n            if(state.sortOrder === \"DESC\"){\n              if(a[action.payload] < b[action.payload]) {\n                res = -1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = 1;\n              }\n              return res;\n            }else{\n              if(a[action.payload] < b[action.payload]) {\n                res = 1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = -1;\n              }\n              return res;\n            }\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: [\n          {x:1, y:parseFloat(action.payload)},\n          {x:2, y:parseFloat(1-action.payload)}\n        ]\n      }\n    case 'SEE_STOCK_PAGE':\n      return{\n        ...state,\n        stockPage: action.payload\n      }\n    case 'SHOW_EXTRA_STOCK_INFO':\n      return{\n        ...state,\n        showExtraStock: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}