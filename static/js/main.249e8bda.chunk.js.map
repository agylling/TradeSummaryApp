{"version":3,"sources":["actions/index.js","components/FileEntry.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["setTransactions","data","type","payload","setSortFilter","order","fileReader","FileReader","connect","dispatch","addTransaction","date","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","index","transactionType","included","removeTransactions","setPercentage","percent","handleFileRead","e","preventDefault","content","result","lines","replace","split","i","length","entry","parseFloat","className","accept","onChange","file","target","files","onloadend","readAsText","include","defaultChecked","onClick","state","transactions","TransactionsStore","sortFilter","sort","a","b","setFilter","filter","map","item","Stock","name","addBuy","paid","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","addSummary","setProfit","stockMap","Map","entries","totalProfit","has","set","get","transaction","constObject","Object","assign","handleTransaction","summarize","values","push","renderSummary","App","defaultState","summaries","sortOrder","readPercentage","transactionsReducer","action","console","log","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.249e8bda.chunk.js","sourcesContent":["export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage } from '../actions'\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, dispatch}) => {\n  const handleFileRead = (e) => {\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n      }\n    }\n\n  const handleFileChosen = (file) => {\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0], addTransaction)}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => (\n  <tr>\n    <td>\n      <input type=\"checkbox\" defaultChecked\n        onClick={() => { include(index, date,included)}}\n      />\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n)\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter, setTransactions } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter, setTransactions }) => (\n  <table className=\"centering\">\n    <thead>\n        <tr>\n        <th> Included </th>\n        <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown  onClick={() => setFilter(\"date\")}/> Date </th>\n        <th> Account </th>\n        <th> Transactiontype </th>\n        <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n        <th> Amount </th>\n        <th> Price </th>\n        <th> Total </th>\n        <th> Brokerage </th>\n        <th> Currency </th>\n        <th> Id </th>\n      </tr>\n    </thead>\n    <tbody>\n      {transactions.map(item =>\n        <Transaction\n          {...item}\n        />\n      )}\n    </tbody>\n  </table>\n)\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n}\n\nconst getTransactions = (transactions, sortFilter) =>{\n  return transactions.sort((a,b) => {\n    return a[sortFilter] < b[sortFilter] ? 1 : -1;\n    setTransactions(transactions);\n  })\n}\n\nconst mapStateToProps = state => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.sortFilter)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter)),\n  setTransactions: data => dispatch(setTransactions(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ?\n      parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*this.avgBought) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, dispatch}) => {\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const handleTransaction = (stock, transaction) => {\n    var constObject = Object.assign({}, transaction);\n    switch(constObject.transactiontype){\n      case 'Köp':\n        stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n        break;\n      case 'Sälj':\n        stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n        break;\n      case 'Utdelning':\n        stock.addDividents(constObject.amount, constObject.price);\n        break;\n      default: break;\n    }\n    stock.getProfits();\n    stock.roundDecimals();\n  };\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          handleTransaction(stock, entry);\n        }\n      });\n  };\n\n  const renderSummary = (entries) => {\n    for(var entry of stockMap.values()){\n      entries.push(entry);\n    }\n    return(\n      entries.map(entry => {\n          {totalProfit += parseFloat(entry.returnProfit())}\n          {setProfit(totalProfit)}\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    summarize(transactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th onClick={() => setFilter(\"stockname\")}>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary(entries)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Profit = ({profit, dispatch}) => {\n  return (\n  <h2> Total Profit: {profit} </h2>\n  )\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react';\nimport './App.css';\nimport FileEntry from './components/FileEntry'\nimport TransactionList from './components/TransactionList'\nimport DataSummary from './components/DataSummary'\nimport Profit from './components/Profit'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profit/>\n      <FileEntry />\n      <TransactionList />\n      <DataSummary />\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: 0\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      console.log(\"IN INCLUDE\")\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        sortFilter: \"date\"\n      }\n    case 'ADD_SUMMARY':\n    console.log(\"IN ADD_SUMMARY\");\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          if(state.sortOrder === \"DESC\"){\n            var res = a[action.payload] < b[action.payload] ? -1 : 1\n            return res;\n          }else{\n            var res = a[action.payload] < b[action.payload] ? 1 : -1\n            return res;\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}