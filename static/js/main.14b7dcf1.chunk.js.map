{"version":3,"sources":["actions/index.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","components/DataTables.js","components/StockSumWindows.js","components/graphs/OverallSummary.js","components/FileEntry.js","components/graphs/InvestedMoney.js","components/Home.js","components/graphs/StockBuySell.js","components/graphs/DividentBar.js","components/StockPage.js","components/MyNavBar.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["setSortFilter","order","type","payload","setStockpage","name","connect","dispatch","include","index","date","included","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","checked","onClick","getNewTransactions","transactions","newTransactions","entry","push","state","TransactionsStore","setFilter","filter","copyOfTransactions","className","map","item","Stock","addBuy","paid","parseFloat","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","setOwned","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","renderData","splittedShares","splits","addSummary","setProfit","stockMap","Map","entries","totalProfit","clear","has","set","get","transaction","constObject","Object","assign","HandleTransaction","length","i","negative","positive","negativeStock","positiveStock","avgBoughtBefore","Math","abs","handlesplits","summarize","values","renderSummary","Col","DataTables","Container","renderWindows","setShowExtraStock","showExtraStock","arrowIcon","divClass","pColor","Row","to","extraInfo","summaries","sort","a","b","showExtraStockInfo","getSummaries","tmp","newSummaries","fillColor","x","y","fill","averageTrade","totalNonZeroTrades","width","aspect","data","layout","value","offset","position","dataKey","layour","verticalAlign","height","strokeDasharray","maxBarSize","fileReader","FileReader","addTransaction","transactionType","removeTransactions","setPercentage","percent","addTransactions","addSplits","handleFileRead","e","preventDefault","content","result","lines","replace","split","accept","onChange","file","target","files","onloadend","readAsText","getTransactions","Date","all","deposited","withrewed","lg","margin","top","right","left","bottom","Home","md","sd","stockPage","S","B","buys","sells","domain","getSummary","dividents","DividentSummary","animate","duration","onLoad","dataComponents","events","onMouseOver","console","log","style","datum","labels","labelComponent","fontSize","textAnchor","verticalAnchor","dy","tickLabels","padding","tickFormat","sm","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","exact","from","component","path","StockPage","App","src","integrity","crossorigin","defaultState","sortFilter","sortOrder","readPercentage","transactionsReducer","action","summary","res","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sUAiEaA,EAAgB,SAACC,GAAD,MAAY,CACvCC,KAAM,cACNC,QAASF,IAQEG,EAAe,SAACC,GAAD,MAAW,CACrCH,KAAM,iBACNC,QAASE,ICbIC,cAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,QAAS,SAACC,EAAOC,EAAKC,GAAcJ,ED7Df,SAACE,EAAOC,EAAMF,GAAd,MACrB,CACAN,KAAM,UACNO,MAAOA,EACPC,KAAMA,EACNC,SAAUH,GCwDmCA,CAAQC,EAAOC,EAAMC,QAGrDL,EA3DK,SAAC,GAMb,IALNE,EAKK,EALLA,QACAE,GAIK,EALIH,SAKJ,EAJLG,MAAME,EAID,EAJCA,QAASC,EAIV,EAJUA,gBACfC,EAGK,EAHLA,UAAWC,EAGN,EAHMA,OAAQC,EAGd,EAHcA,MACnBC,EAEK,EAFLA,MAAOC,EAEF,EAFEA,UAAWC,EAEb,EAFaA,SAClBC,EACK,EADLA,GAAIT,EACC,EADDA,SAAUF,EACT,EADSA,MAed,OACA,4BACE,4BAbuB,UAApBI,EACM,KAGL,2BAAOX,KAAK,WAAWmB,QAASV,EAChCW,QAAS,WAAQd,EAAQC,EAAOC,EAAKC,OAWzC,iCAAOD,EAAP,MACA,iCAAOE,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,OACA,iCAAOC,EAAP,W,QCmBSG,EAAqB,SAACC,EAAcnB,GAC/C,IAAIoB,EAAkB,GADkC,uBAExD,IAAI,IAAJ,EAAQ,EAASD,EAAjB,+CAA8B,CAAC,IAAvBE,EAAsB,QACzBA,EAAMZ,YAAcT,GACrBoB,EAAgBE,KAAKD,IAJ+B,kFAOxD,OAAOD,GAWMnB,eARS,SAAAsB,GAAK,MAAK,CAChCJ,aAAcI,EAAMC,kBAAkBL,iBAGb,SAAAjB,GAAQ,MAAK,CACtCuB,UAAW,SAAAC,GAAM,OAAIxB,EAASP,EAAc+B,QAG/BzB,EArES,SAAC,GAAsC,IAApCkB,EAAmC,EAAnCA,aAAcM,EAAqB,EAArBA,UAAWzB,EAAU,EAAVA,KAC9C2B,EAAkB,YAAOR,GAI7B,MAHY,KAATnB,IACD2B,EAAqBT,EAAmBC,EAAcnB,IAGtD,2BAAO4B,UAAU,aACf,+BACI,4BACA,0CACA,wBAAIA,UAAU,OAAOX,QAAS,kBAAMQ,EAAU,UAA9C,IAAwD,kBAAC,IAAD,MAAxD,UACA,yCACA,iDACA,wBAAIG,UAAU,OAAOX,QAAS,kBAAMQ,EAAU,eAA9C,IAA6D,kBAAC,IAAD,MAA7D,WACA,wCACA,uCACA,uCACA,2CACA,0CACA,sCAGJ,+BACGE,EAAmBE,KAAI,SAAAC,GAAI,OAC1B,kBAAC,EACKA,W,SC9BKC,EAEnB,WAAY/B,GAAM,IAAD,gCAajBgC,OAAS,SAACtB,EAAQC,EAAOE,GAEvBA,EAA0B,MAAdA,EAAoB,EAAIA,EACpC,EAAKoB,MAASC,WAAWvB,GAAOuB,WAAWxB,GAC3C,EAAKyB,cAAgBD,WAAWxB,GAChC,EAAK0B,aAAeF,WAAWxB,GAC/B,EAAK2B,UAAYH,WAAW,EAAKD,KAAO,EAAKE,cAC7C,EAAKtB,WAAaqB,WAAWrB,IApBd,KAuBjByB,KAAO,SAAC5B,EAAQC,EAAOE,GAErBA,EAA0B,MAAdA,EAAoB,EAAIA,EACpC,IAAI0B,GAAW,EAAIL,WAAWxB,GAAUwB,WAAWvB,GACnD,EAAKyB,aAAeF,WAAWxB,GAC/B,EAAK8B,aAAe,EAAEN,WAAWxB,GACjC,EAAK+B,MAAQF,EACb,EAAK1B,WAAaqB,WAAWrB,IA9Bd,KAiCjB6B,aAAe,SAAChC,EAAQiC,GACtB,EAAKA,UAAYT,WAAWxB,GAAQwB,WAAWS,IAlChC,KAqCjBC,SAAW,SAAClC,GAEV,EAAK0B,aAAeF,WAAWxB,IAvChB,KA0CjBmC,WAAa,WACX,IAAIC,EAAYZ,WAAW,EAAKC,cAAgBD,WAAW,EAAKM,YAAcN,WAAW,EAAKC,cAAgBD,WAAW,EAAKM,YAC9H,EAAKO,OAASb,WAAW,EAAKO,MAASK,EAAUZ,WAAW,EAAKG,WAAcH,WAAW,EAAKS,UAAYT,WAAW,EAAKrB,YA5C5G,KA+CjBmC,aAAe,WACb,OAAO,EAAKD,QAhDG,KAmDjBE,iBAAmB,WACjB,OAAmB,IAAhB,EAAKF,OACC,KAGP,4BACE,4BAAK,EAAK/C,MACV,4BAAK,EAAKmC,cACV,4BAAK,EAAKE,WACV,4BAAK,EAAKJ,MACV,4BAAK,EAAKO,YACV,4BAAKN,WAAWA,WAAW,EAAKO,MAAMP,WAAW,EAAKM,aAAaU,QAAQ,IAC3E,4BAAK,EAAKT,MACV,4BAAK,EAAKE,UACV,4BAAK,EAAK9B,WACV,4BAAK,EAAKkC,UAlEC,KAuEjBI,cAAgB,WACd,EAAKf,YAAcF,WAAW,EAAKE,YAAYc,QAAQ,IACvD,EAAKjB,KAAOC,WAAW,EAAKD,KAAKiB,QAAQ,IACzC,EAAKf,aAAeD,WAAW,EAAKC,aAAae,QAAQ,IACzD,EAAKT,KAAOP,WAAW,EAAKO,KAAKS,QAAQ,IACzC,EAAKV,WAAaN,WAAW,EAAKM,WAAWU,QAAQ,IACrD,EAAKb,UAAYH,WAAW,EAAKG,UAAUa,QAAQ,IACnD,EAAKP,SAAWT,WAAW,EAAKS,SAASO,QAAQ,IACjD,EAAKH,OAASb,WAAW,EAAKa,OAAOG,QAAQ,IAC7C,EAAKrC,UAAYqB,WAAW,EAAKrB,UAAUqC,QAAQ,KA/EnDE,KAAKpD,KAAOA,EACZoD,KAAKhB,YAAc,EACnBgB,KAAKnB,KAAO,EACZmB,KAAKjB,aAAe,EACpBiB,KAAKX,KAAO,EACZW,KAAKZ,WAAa,EAClBY,KAAKf,UAAY,EACjBe,KAAKT,SAAW,EAChBS,KAAKL,OAAS,EACdK,KAAKvC,UAAY,GA0ERwC,EAAe,SAACC,GAC3B,OACEA,EAAML,oBCuFKhD,eAZS,SAAAsB,GAAK,MAAK,CAChCJ,aAAcI,EAAMC,kBAAkBL,aACtCoC,WAAYhC,EAAMC,kBAAkB+B,WACpCC,eAAgBjC,EAAMC,kBAAkBiC,WAGf,SAACvD,GAAD,MAAe,CACxCwD,WAAY,SAAAJ,GAAK,OAAIpD,EJ7HrB,CACEL,KAAM,cACNC,QI2HuCwD,KACzCK,UAAY,SAAAZ,GAAM,OAAI7C,EJjHC,SAAC6C,GAAD,MAAa,CACpClD,KAAM,aACNC,QAASiD,GI+GsBY,CAAUZ,KACzCtB,UAAW,SAAAC,GAAM,OAAIxB,EAASP,EAAc+B,QAG/BzB,EAzKK,SAAC,GAAkG,IAAjGkB,EAAgG,EAAhGA,aAAcuC,EAAkF,EAAlFA,WAAYC,EAAsE,EAAtEA,UAAWlC,EAA2D,EAA3DA,UAAWzB,EAAgD,EAAhDA,KAAMuD,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,eAA8B,EAAdtD,SACtG,IAAkB,IAAfqD,EACD,OAAQ,KAGV,IAAI5B,EAAkB,YAAOR,GAOzByC,EAAW,IAAIC,IACfC,EAAU,GACVC,EAAc,EAgFlB,OACEH,EAASI,QAtCO,SAAC7C,GAEfA,EAAaU,KAAI,SAAAR,GAEXuC,EAASK,IAAI5C,EAAMZ,YACrBmD,EAASM,IAAI7C,EAAMZ,UAAW,IAAIsB,EAAMV,EAAMZ,YAEhD,IAAI6C,EAAQM,EAASO,IAAI9C,EAAMZ,WAI/B,OAHGY,EAAMf,UA1BW,SAACgD,EAAOc,GAChC,IAAIC,EAAcC,OAAOC,OAAO,GAAIH,GACpC,OAAOC,EAAY7D,iBACjB,IAAK,SACH8C,EAAMtB,OAAOqC,EAAY3D,OAAQ2D,EAAY1D,MAAO0D,EAAYxD,WAChE,MACF,IAAK,UACHyC,EAAMhB,KAAK+B,EAAY3D,OAAQ2D,EAAY1D,MAAO0D,EAAYxD,WAC9D,MACF,IAAK,YACHyC,EAAMZ,aAAa2B,EAAY3D,OAAQ2D,EAAY1D,QAiBjD6D,CAAkBlB,EAAOjC,GAEpB,QApDQ,WAGnB,GAAImC,EAAeiB,OAAO,IAAM,EAGhC,IAAI,IAAIC,EAAI,EAAGA,EAAElB,EAAeiB,OAAQC,GAAK,EAAE,CAC7C,IAAIC,EAAWzC,WAAWsB,EAAekB,GAAGhE,QAAU,EAAI8C,EAAekB,GAAKlB,EAAekB,EAAE,GAC3FE,EAAW1C,WAAWsB,EAAekB,GAAGhE,QAAU,EAAI8C,EAAekB,EAAE,GAAKlB,EAAekB,GAE3FG,EAAgBjB,EAASO,IAAIQ,EAASlE,WACtCqE,EAAgBlB,EAASO,IAAIS,EAASnE,WAE1C,GAAoB,MAAjBoE,EAAsB,CACvB,IAAIE,EAAkB7C,WAAW2C,EAAcxC,UAAUa,QAAQ,IACjE6B,GAAmBC,KAAKC,IAAIN,EAASjE,QACjB,MAAjBoE,GACDA,EAAc9C,OAAO4C,EAASlE,OAAQqE,EAAiB,KAsC3DG,GAyBFC,CAAUxD,GACV+B,EAAWI,GACX,yBAAKlC,UAAU,aACb,2BAAOA,UAAU,aACf,+BACE,4BACE,wBAAIX,QAAS,kBAAMQ,EAAU,eAA7B,QACA,sCACA,oCACA,qCACA,oCACA,oCACA,qCACA,yCACA,yCACA,wCAGJ,+BAvCgB,WAAO,IAAD,uBAC1B,IAAI,IAAJ,EAAQ,EAASmC,EAASwB,SAA1B,+CAAmC,CAAC,IAA5B/D,EAA2B,QAC9BA,EAAMrB,OAASA,EAChB8D,EAAQxC,KAAKD,GACG,OAATrB,GAA0B,KAATA,GAAwB,QAATA,GACvC8D,EAAQxC,KAAKD,IALS,kFAQ1B,OACEyC,EAAQjC,KAAI,SAAAR,GAKR,OAJAA,EAAMwB,aACNxB,EAAM8B,gBACNY,GAAe7B,WAAWb,EAAM2B,gBAChCW,EAAUI,GACH,kBAACV,EAAiBhC,MA0BzBgE,S,SCjGKpF,eARS,SAAAsB,GAAK,MAAK,CAChCwB,OAASxB,EAAMC,kBAAkBuB,OAAOG,QAAQ,GAChDK,WAAYhC,EAAMC,kBAAkB+B,eAGX,SAAArD,GAAQ,MAAK,KAGzBD,EArBA,SAAC,GAAoC,IAAnC8C,EAAkC,EAAlCA,OAAQQ,EAA0B,EAA1BA,WAA0B,EAAdrD,SACnC,OAAkB,IAAfqD,EACO,KAGV,kBAAC+B,EAAA,EAAD,KAAK,uBAAG1D,UAAU,eAAb,kBAA2CmB,EAA3C,S,SCMQwC,EAVI,WACjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAaxF,KAAK,QAClB,kBAAC,EAAD,CAAiBA,KAAK,O,SC0BtByF,EAAgB,SAAC3B,EAAS/D,EAAc2F,EAAmBC,GAC/D,OACE7B,EAAQjC,KAAI,SAAAR,GACV,IAAMuE,EAAYD,IAAmBtE,EAAMrB,KACzC,kBAAC,IAAD,CAAWiB,QAAS,kBAAMyE,EAAkB,OAC5C,kBAAC,IAAD,CAAazE,QAAS,kBAAMyE,EAAkBrE,EAAMrB,SAClD6F,EAAY3D,WAAWb,EAAM0B,SAAW,EAAI,eAAiB,gBAC7D+C,EAAS5D,WAAWb,EAAM0B,SAAW,EAAI,YAAc,UACzD,OACE,kBAACyC,EAAA,EAAD,CAAW5D,UAAW,uDAAyDiE,GAC7E,kBAACE,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,SAAM,+BAAKjE,EAAMrB,KAAX,KAAN,KACA,kBAACsF,EAAA,EAAD,KACE,uBAAG1D,UAAWkE,GAAd,IAAwBzE,EAAM0B,OAA9B,KAAuC,kBAAC,IAAD,CAASnB,UAAU,qBAE5D,kBAAC0D,EAAA,EAAD,KACGM,EACD,kBAAC,IAAD,CAAMhE,UAAU,aAAaX,QAAS,kBAAMlB,EAAasB,EAAMrB,OAAOgG,GAAG,cACvE,kBAAC,IAAD,CAAUpE,UAAU,kBAnCpB,SAACP,EAAOsE,GACxB,OAAGA,IAAmBtE,EAAMrB,KAExB,kBAACwF,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,SAAM,kCAAQjE,EAAMc,aAAd,MAA+Bd,EAAMgB,UAArC,KAAN,KACA,kBAACiD,EAAA,EAAD,SAAM,kCAAQjE,EAAMmB,WAAd,MAA6BN,WAAWA,WAAWb,EAAMoB,MAAMP,WAAWb,EAAMmB,aAAaU,QAAQ,GAArG,KAAN,KACA,kBAACoC,EAAA,EAAD,SAAM,0CAAgBjE,EAAMsB,SAAtB,KAAN,OAKC,KA2BIsD,CAAU5E,EAAOsE,QA8DjB1F,eAXS,SAACsB,GAAD,MAAY,CAClC2E,WAfoBA,EAeI3E,EAAMC,kBAAkB0E,UAb9C,YAAIA,GAAWC,MAAK,SAACC,EAAEC,GACrB,OAAGnE,WAAWkE,EAAC,QAAclE,WAAWmE,EAAC,QAChC,EACAnE,WAAWkE,EAAC,QAAclE,WAAWmE,EAAC,SACrC,EAED,MAQbV,eAAgBpE,EAAMC,kBAAkBmE,eACxCpC,WAAYhC,EAAMC,kBAAkB+B,YAjBjB,IAAC2C,KAoBK,SAAChG,GAAD,MAAe,CACxCH,aAAc,SAACC,GAAD,OAAUE,EAASH,EAAaC,KAC9C0F,kBAAmB,SAAC1F,GAAD,OAAUE,EPtCG,SAACF,GAAD,MAAW,CAC3CH,KAAM,wBACNC,QAASE,GOoC6BsG,CAAmBtG,QAG5CC,EAvDa,SAAC,GAAwF,IAAvFiG,EAAsF,EAAtFA,UAAWnG,EAA2E,EAA3EA,aAAc2F,EAA6D,EAA7DA,kBAAmBC,EAA0C,EAA1CA,eAAgBpC,EAA0B,EAA1BA,WAA0B,EAAdrD,SACpG,OAAkB,IAAfqD,EACO,KAGR,kBAACiC,EAAA,EAAD,KACGC,EAAcS,EAAWnG,EAAc2F,EAAmBC,O,QChB3DY,EAAe,SAACL,GACpB,IAAIM,EAAM,YAAIN,GAAWC,MAAK,SAACC,EAAEC,GAC7B,OAAGnE,WAAWkE,EAAC,QAAclE,WAAWmE,EAAC,QAChC,EACAnE,WAAWkE,EAAC,QAAclE,WAAWmE,EAAC,SACrC,EAED,KAGTI,EAAe,GAVc,uBAYjC,IAAI,IAAJ,EAAQ,EAASD,EAAjB,+CAAqB,CAAC,IAAdnF,EAAa,QACnB,GAAoB,IAAjBA,EAAM0B,OAAT,CAGA,IAAI2D,EAAY,UACbrF,EAAM0B,OAAS,IAChB2D,EAAY,WAEdD,EAAanF,KAAK,CAACqF,EAAGtF,EAAMrB,KAAM4G,EAAG5B,KAAKC,IAAI5D,EAAM0B,QAAS8D,KAAMH,IACnErF,EAAQ,OArBuB,kFAyBjC,OADAmF,EAAM,KACCC,GAWMxG,eARS,SAACsB,GAAD,MAAY,CAClC2E,UAAWK,EAAahF,EAAMC,kBAAkB0E,WAChD3C,WAAYhC,EAAMC,kBAAkB+B,eAGX,SAAArD,GAAQ,MAAK,KAGzBD,EAtFQ,SAAC,GAAuC,IAAtCiG,EAAqC,EAArCA,UAAW3C,EAA0B,EAA1BA,WAA0B,EAAdrD,SAC9C,IAAkB,IAAfqD,EACD,OAAQ,KAEV,IAAIuD,EAAe,IACfC,EAAqB,EALmC,uBAM5D,IAAI,IAAJ,EAAQ,EAASb,EAAjB,+CAA2B,CAAC,IAApB7E,EAAmB,SACtBa,WAAWb,EAAM0B,QAAU,GAAKb,WAAWb,EAAM0B,QAAU,KAC5D+D,GAAgB5E,WAAWb,EAAM0B,QACjCgE,MATwD,kFAY5DD,GAA4BC,EAE5B,OACE,kBAACzB,EAAA,EAAD,CAAK1D,UAAU,0BACb,kBAAC,IAAD,CAAqBoF,MAAM,OAAOC,OAAQ,IACxC,kBAAC,IAAD,CAAUC,KAAMhB,EAAWiB,OAAO,YAChC,kBAAC,IAAD,CAAOtH,KAAK,UACV,kBAAC,IAAD,CAAOuH,MAAM,QAAQC,OAAQ,EAAGC,SAAS,kBAE3C,kBAAC,IAAD,CAAOC,QAAQ,IAAI1H,KAAK,aACxB,kBAAC,IAAD,CAAO2H,OAAO,aACd,kBAAC,IAAD,CAAQC,cAAc,MAAMC,OAAQ,KACpC,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKC,WAAY,GAAIL,QAAQ,QAGjC,iCC7BAM,EAAa,IAAIC,WA8FR7H,cACb,MAVyB,SAACC,GAAD,MAAe,CACxC6H,eAAgB,SAAC1H,EAAME,EAASC,EAAiBC,EAAWC,EAAQC,EAAOC,EAAOC,EAAWC,EAAUC,EAAIX,GAA3F,OAAqGF,ET7EzF,SAACG,EAAME,EAASyH,EAAiBvH,EAAWC,EAAQC,EAAOC,EAAOC,EAAWC,EAAUC,EAAIX,GAA3F,MAC5B,CACAP,KAAM,kBACNQ,KAAMA,EACNE,QAASA,EACTC,gBAAiBwH,EACjBvH,UAAWA,EACXC,OAAQA,EACRC,MAAOA,EACPC,MAAOA,EACPC,UAAWA,EACXC,SAAUA,EACVC,GAAIA,EACJT,UAAU,EACVF,MAAOA,GS+DuH2H,CAAe1H,EAAME,EAASC,EAAiBC,EAAWC,EAAQC,EAAOC,EAAOC,EAAWC,EAAUC,EAAIX,KACvO6H,mBAAoB,kBAAM/H,ETlDiB,CAC3CL,KAAM,yBSkDNqI,cAAe,SAACC,GAAD,OAAajI,ETxBD,SAACiI,GAAD,MAAc,CACzCtI,KAAM,iBACNC,QAASqI,GSsB4BD,CAAcC,KACnD5E,WAAY,kBAAMrD,ETVa,CAC/BL,KAAM,iBSUNuI,gBAAiB,SAAAjH,GAAY,OAAIjB,ETxFJ,SAACiB,GAAD,MAC7B,CACAtB,KAAM,mBACNC,QAASqB,GSqFiCiH,CAAgBjH,KAC1DkH,UAAW,SAAA5E,GAAM,OAAIvD,EThEa,CAClCL,KAAM,aACNC,QS8DwC2D,QAG3BxD,EA5FG,SAAC,GAA0G,EAAzG8H,eAA0G,IAA1FE,EAAyF,EAAzFA,mBAAmC1E,GAAsD,EAArE2E,cAAqE,EAAtD3E,YAAY6E,EAA0C,EAA1CA,gBAAiBC,EAAyB,EAAzBA,UAE5FC,GAFqH,EAAdpI,SAEtF,SAACqI,GACpB,IAAIpH,EAAe,GACfsC,EAAS,GACb8E,EAAEC,iBAIF,IAHA,IAAIC,EAAUZ,EAAWa,OAEnBC,GADNF,EAAUA,EAAQG,QAAQ,KAAM,MACVC,MAAM,MACpBnE,EAAI,EAAGA,EAAIiE,EAAMlE,OAAQC,IAAI,CACnC,IAAIrD,EAAQsH,EAAMjE,GAAGmE,MAAM,KAElB,IAANnE,GAAWA,IAAMiE,EAAMlE,OAAO,IAGjB,UAAbpD,EAAM,IACPoC,EAAOnC,KAAK,CACVjB,KAAMgB,EAAM,GACZd,QAASc,EAAM,GACfb,gBAAiBa,EAAM,GACvBZ,UAAWY,EAAM,GACjBX,OAAQW,EAAM,GACdV,MAAOU,EAAM,GACbT,MAAOS,EAAM,GACbR,UAAWQ,EAAM,GACjBP,SAAUO,EAAM,GAChBN,GAAIM,EAAM,GACVf,UAAU,EACVF,MAAQsE,EAAE,IAGdvD,EAAaG,KAAK,CAChBjB,KAAMgB,EAAM,GACZd,QAASc,EAAM,GACfb,gBAAiBa,EAAM,GACvBZ,UAAWY,EAAM,GACjBX,OAAQW,EAAM,GACdV,MAAOU,EAAM,GACbT,MAAOS,EAAM,GACbR,UAAWQ,EAAM,GACjBP,SAAUO,EAAM,GAChBN,GAAIM,EAAM,GACVf,UAAU,EACVF,MAAQsE,EAAE,IAKZiE,EAAMjE,GAAK,KACXrD,EAAQ,MAEV+G,EAAgBjH,GAChBkH,EAAU5E,KAUd,OACE,6BACE,2BAAO5D,KAAK,OACLkB,GAAG,OACHa,UAAU,aACVkH,OAAO,OACPC,SAAU,SAAAR,GAAC,OAbIS,EAaiBT,EAAEU,OAAOC,MAAM,GAZtDjB,IACAJ,EAAWsB,UAAYb,EACvBT,EAAWuB,WAAWJ,QACtBzF,IAJqB,IAACyF,SCnCtBK,EAAkB,SAAClI,EAAcnB,GACrC,IAAIwG,EAAM,YAAIrF,GAAcgF,MAAK,SAACC,EAAEC,GAChC,OAAG,IAAIiD,KAAKlD,EAAC,MAAY,IAAIkD,KAAKpH,WAAWmE,EAAC,QACpC,EACD,IAAIiD,KAAKlD,EAAC,MAAY,IAAIkD,KAAKjD,EAAC,MAChC,EAEA,KAGTkD,EAAM,GAVmC,uBAW7C,IAAI,IAAJ,EAAQ,EAAS/C,EAAjB,+CAAqB,CAAC,IAAdnF,EAAa,QACU,kBAA1BA,EAAMb,iBAA8D,UAA1Ba,EAAMb,kBACpB,kBAA1Ba,EAAMb,gBACP+I,EAAIjI,KAAK,CAACqF,EAAGtF,EAAMhB,KAAMmJ,UAAWtH,WAAWb,EAAMT,SAErD2I,EAAIjI,KAAK,CAACqF,EAAGtF,EAAMhB,KAAMoJ,UAAWvH,WAAW8C,KAAKC,IAAI5D,EAAMT,YAhBvB,kFAoB7C,OAAO2I,GAWMtJ,eARS,SAACsB,GAAD,MAAY,CAClCJ,aAAckI,EAAgB9H,EAAMC,kBAAkBL,cACtDoC,WAAYhC,EAAMC,kBAAkB+B,eAGX,SAAArD,GAAQ,MAAK,KAGzBD,EArDO,SAAC,GAAyC,IAAxCkB,EAAuC,EAAvCA,aAAaoC,EAA0B,EAA1BA,WAA0B,EAAdrD,SAC/C,OAAkB,IAAfqD,EACO,KAGR,kBAAC+B,EAAA,EAAD,CAAKoE,GAAG,KACN,kBAAC,IAAD,CAAU1C,MAAO,IAAMU,OAAQ,IAAKR,KAAM/F,EACxCwI,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,IAC/C,kBAAC,IAAD,CAAOxC,QAAQ,MACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAQE,cAAc,MAAMC,OAAQ,KACpC,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKC,WAAY,GAAI5H,KAAK,YAAauH,QAAQ,YAAYV,KAAK,YAChE,kBAAC,IAAD,CAAKe,WAAY,GAAI5H,KAAK,YAAauH,QAAQ,YAAYV,KAAK,aAElE,iCCqBSmD,EAnCF,WACX,OACE,kBAACxE,EAAA,EAAD,KACE,kBAACA,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACS,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,CAAKoE,GAAI,EAAGO,GAAI,EAAGC,GAAI,IACrB,kBAAC,EAAD,OAEF,kBAAC5E,EAAA,EAAD,CAAK1D,UAAW,aACd,kBAAC,EAAD,QAGJ,kBAACmE,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAACS,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,KACG,kBAAC,EAAD,SAIP,kBAACE,EAAA,EAAD,KACE,kBAAC,EAAD,CAAaxF,KAAK,WCKpBqJ,EAAkB,SAAClI,EAAcgJ,GACrC,IAAIC,EAAI,GACJC,EAAI,GAF2C,uBAGnD,IAAI,IAAJ,EAAQ,EAASlJ,EAAjB,+CAA8B,CAAC,IAAvBE,EAAsB,QACzBA,EAAMZ,YAAc0J,IAAgC,IAAnB9I,EAAMf,WACX,YAA1Be,EAAMb,gBACP4J,EAAE9I,KAAK,CAACqF,EAAGtF,EAAMhB,KAAMuG,EAAG1E,WAAWb,EAAMV,OAAQP,MAAOiB,EAAMjB,QAEhEiK,EAAE/I,KAAK,CAACqF,EAAGtF,EAAMhB,KAAMuG,EAAG1E,WAAWb,EAAMV,OAAQP,MAAOiB,EAAMjB,UARnB,kFAcnD,MAAO,CAACkK,KAAMD,EAAGE,MAAOH,IAYXnK,eARS,SAACsB,GAAD,MAAY,CAClCJ,aAAckI,EAAgB9H,EAAMC,kBAAkBL,aAAcI,EAAMC,kBAAkB2I,WAC5FA,UAAW5I,EAAMC,kBAAkB2I,cAGV,SAAAjK,GAAQ,MAAK,KAGzBD,EA9DM,SAAC,GAAyC,IAAxCkB,EAAuC,EAAvCA,aAAuC,EAAzBgJ,UAAyB,EAAdjK,SAE9C,OACM,kBAACoF,EAAA,EAAD,CAAKoE,GAAG,KACN,kBAAC,IAAD,CAAc1C,MAAO,IAAKU,OAAQ,IACjCiC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIE,OAAQ,GAAID,KAAM,KAC/C,kBAAC,IAAD,CAAenC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOJ,QAAQ,IAAIvH,KAAK,QAAQwK,OAAQ,CAAC,UAAW,aACpD,kBAAC,IAAD,CAAOjD,QAAQ,IAAIvH,KAAK,UACxB,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASA,KAAK,kBAAkBkH,KAAM/F,EAAamJ,KAAMzD,KAAK,YAC9D,kBAAC,IAAD,CAAS7G,KAAK,OAAOkH,KAAM/F,EAAaoJ,MAAO1D,KAAK,iB,6CCyC1DwC,EAAkB,SAAClI,EAAcnB,GACrC,IAAIwG,EAAM,YAAIrF,GAAcgF,MAAK,SAACC,EAAEC,GAChC,OAAG,IAAIiD,KAAKlD,EAAC,MAAY,IAAIkD,KAAKpH,WAAWmE,EAAC,OACrC,EACA,IAAIiD,KAAKlD,EAAC,MAAY,IAAIkD,KAAKjD,EAAC,OAC/B,EAED,KAGTjF,EAAkB,GAVuB,uBAW7C,IAAI,IAAJ,EAAQ,EAASoF,EAAjB,+CAAqB,CAAC,IAAdnF,EAAa,QAChBA,EAAMrB,OAASA,GAAkC,cAA1BqB,EAAMb,iBAC9BY,EAAgBE,KAAKD,IAboB,kFAgB7C,OAAOD,GAGHqJ,EAAa,SAACvE,EAAWlG,GAAU,IAAD,uBACpC,IAAI,IAAJ,EAAQ,EAASkG,EAAjB,+CAA2B,CAAC,IAApB7E,EAAmB,QACvB,GAAGA,EAAMrB,OAASA,EACd,OAAOqB,EAAMsB,UAHe,kFAMpC,OAAO,GAWI1C,eARS,SAACsB,GAAD,MAAY,CAClCJ,aAAckI,EAAgB9H,EAAMC,kBAAkBL,aAAcI,EAAMC,kBAAkB2I,WAC5FO,UAAWD,EAAWlJ,EAAMC,kBAAkB0E,UAAW3E,EAAMC,kBAAkB2I,eAGxD,SAAAjK,GAAQ,MAAK,KAGzBD,EA1FK,SAAC,GAAwC,EAAvCkB,aAAwC,IAA1BuJ,EAAyB,EAAzBA,UAC9BC,GADuD,EAAdzK,SACzB,CAAC,CAACyG,EAAG,YAAYC,EAAG8D,EAAW7D,KAAM,aACzD,OACM,kBAACvB,EAAA,EAAD,CAAK1D,UAAU,IACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CACAgJ,QAAS,CACLC,SAAU,IACVC,OAAQ,CAAED,SAAU,MAGxBE,eACI,kBAAC,IAAD,CAAKC,OAAQ,CAACC,YAAa,kBAAMC,QAAQC,IAAI,iBAEjDC,MAAO,CACHlE,KAAM,CAACL,KAAM,qBAAGwE,MAAkBxE,MAAMG,MAAO,IAAKU,OAAQ,MAEhER,KAAMyD,EACNW,OAAQ,qBAAED,MAAiBzE,GAC3B2E,eACI,kBAAC,IAAD,CAAcH,MAAO,CACjBI,SAAU,GAAI3E,KAAK,SAEvB4E,WAAW,SAASC,eAAe,MACnCC,GAAI,MAIR,kBAAC,IAAD,CAAcP,MAAO,CAACQ,WAAY,CAACJ,SAAU,GAAIK,QAAS,MAC1D,kBAAC,IAAD,CAAaC,WAAY,iBAAM,WCK9B7L,eAPS,SAACsB,GAAD,MAAY,CAClCvB,KAAMuB,EAAMC,kBAAkB2I,cAGL,SAAAjK,GAAQ,MAAK,KAGzBD,EA9BG,SAAC,GAAsB,IAArBD,EAAoB,EAApBA,KAAoB,EAAdE,SACxB,OACE,kBAACsF,EAAA,EAAD,CAAW5D,UAAW,mBAEpB,kBAACmE,EAAA,EAAD,KACE,kBAACT,EAAA,EAAD,CAAKoE,GAAI,EAAGO,GAAI,GAAI8B,GAAI,IACtB,kBAAChG,EAAA,EAAD,KAAK,kBAACT,EAAA,EAAD,SAAM,kBAAC,EAAD,CAAatF,KAAMA,MAC9B,kBAAC+F,EAAA,EAAD,SAAM,kBAAC,EAAD,MAAN,KACA,kBAACA,EAAA,EAAD,SAAO,kBAAC,EAAD,MAAP,MAEF,kBAACT,EAAA,EAAD,CAAKoE,GAAI,EAAGO,GAAI,GAAI8B,GAAI,IACtB,kBAAC,EAAD,CAAiB/L,KAAMA,UCoElBC,eARS,SAACsB,GAAD,MAAY,CAClC2E,WAfoBA,EAeI3E,EAAMC,kBAAkB0E,UAb9C,YAAIA,GAAWC,MAAK,SAACC,EAAEC,GACrB,OAAGnE,WAAWkE,EAAC,MAAYlE,WAAWmE,EAAC,MAC9B,EACAnE,WAAWkE,EAAC,MAAYlE,WAAWmE,EAAC,OACnC,EAED,OARM,IAACH,KAkBK,SAAAhG,GAAQ,MAAK,CACtCH,aAAc,SAACC,GAAD,OAAUE,EAASH,EAAaC,QAGjCC,EA3EE,SAAC,GAAwC,EAAvCF,aAAuC,EAAzBmG,UAAyB,EAAdhG,SAa1C,OACE,kBAAC,IAAD,KACE,kBAAC8L,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACrD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KAAnB,iBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiB1L,GAAG,yBAClB,kBAAC2L,EAAA,EAAD,CAAK9K,UAAU,qBACb,kBAAC,IAAD,CAAMA,UAAU,YAAYoE,GAAG,SAA/B,QACA,kBAAC,IAAD,CAAMpE,UAAU,YAAYoE,GAAG,eAA/B,gBAEF,kBAAC0G,EAAA,EAAD,KACE,kBAAC,IAAD,CAAM9K,UAAU,YAAYoE,GAAG,UAA/B,YAIN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2G,OAAK,EAACC,KAAK,IAAIC,UAAW7C,IACjC,kBAAC,IAAD,CAAO2C,OAAK,EAACG,KAAK,QAAQD,UAAW7C,IACrC,kBAAC,IAAD,CAAO8C,KAAK,cAAcD,UAAWtH,IACrC,kBAAC,IAAD,CAAOuH,KAAK,aAAaD,UAAWE,SCrB7BC,EApBH,WACV,OACE,yBAAKpL,UAAU,OACf,4BAAQqL,IAAI,mDACZC,UAAU,0EACVC,YAAY,cAEZ,4BAAQF,IAAI,4EACZC,UAAU,0EACVC,YAAY,cAEZ,4BAAQF,IAAI,yEACZC,UAAU,0EACVC,YAAY,cAEV,kBAAC,EAAD,Q,2kBCpBN,IAAMC,GAAe,CACnBjM,aAAc,GACd+E,UAAW,GACXnD,OAAQ,EACRsK,WAAY,OACZC,UAAW,OACXC,eAAgB,CAAC,CAAC5G,EAAE,EAAGC,EAAG,GAAG,CAACD,EAAE,EAAGC,EAAE,MACrCuD,UAAW,GACXxE,eAAgB,GAChBpC,YAAY,EACZE,OAAQ,IA+IK+J,GA5Ia,WAAmC,IAAlCjM,EAAiC,uDAAzB6L,GAAcK,EAAW,uCAC5D,OAAOA,EAAO5N,MACZ,IAAK,UACH,OAAO,GAAP,GAAW0B,EAAX,CAAkBJ,aAChBI,EAAMJ,aAAaU,KAAI,SAAAuC,GAAW,OACjCA,EAAYhE,QAAUqN,EAAOrN,OAASgE,EAAYpE,OAASyN,EAAOzN,KAAnE,MACQoE,EADR,CACqB9D,UAAWmN,EAAOnN,WACnC8D,OAIR,IAAK,mBACH,aACK7C,EADL,CAEEJ,aAAcsM,EAAO3N,UAEzB,IAAK,kBACH,OAAO,GAAP,GACKyB,EADL,CAEEJ,aAAa,GAAD,mBACPI,EAAMJ,cADC,CAEV,CACEd,KAAMoN,EAAOpN,KACbE,QAASkN,EAAOlN,QAChBC,gBAAiBiN,EAAOjN,gBACxBC,UAAWgN,EAAOhN,UAClBC,OAAQ+M,EAAO/M,OACfC,MAAO8M,EAAO9M,MACdC,MAAO6M,EAAO7M,MACdC,UAAW4M,EAAO5M,UAClBC,SAAU2M,EAAO3M,SACjBC,GAAI0M,EAAO1M,GACXT,UAAU,EACVF,MAAOqN,EAAOrN,WAItB,IAAK,aACL,OAAO,GAAP,GACKmB,EADL,CAEEkC,OAAQgK,EAAO3N,UAEjB,IAAK,mBACH,OAAO,GAAP,GACKyB,EADL,CAEEJ,aAAcsM,EAAO3N,UAEzB,IAAK,sBACH,aACKyB,EADL,CAEEJ,aAAc,GACd+E,UAAW,GACXzC,OAAQ,GACRV,OAAQ,EACRsK,WAAY,OACZC,UAAW,OACXC,eAAgB,CAAC,CAAC5G,EAAE,EAAGC,EAAG,GAAG,CAACD,EAAE,EAAGC,EAAE,MACrCuD,UAAW,GACXxE,eAAgB,GAChBpC,YAAY,IAEhB,IAAK,cACH,aACKhC,EADL,CAEE2E,UAAWuH,EAAO3N,UAEtB,IAAK,cACH,aACKyB,EADL,CAEE2E,UACC3E,EAAM2E,UAAUrE,KAAI,SAAA6L,GAAO,OACzBA,EAAQ1N,OAASyN,EAAO3N,QAAQE,KAC7ByN,EAAO3N,QACP4N,OAGV,IAAK,aACH,OAAO,GAAP,GACKnM,EADL,CAEEwB,OAAQ0K,EAAO3N,UAEnB,IAAK,cACH,OAAO,GAAP,GACKyB,EADL,CAEEJ,aAAc,YAAII,EAAMJ,cAAcgF,MAAK,SAACC,EAAEC,GAC5C,IAAIsH,EAAM,EACV,OAAGF,EAAO3N,UAAYyB,EAAM8L,WACnBM,EAGgB,SAApBpM,EAAM+L,WACJlH,EAAEqH,EAAO3N,SAAWuG,EAAEoH,EAAO3N,SAC9B6N,GAAO,EAEAvH,EAAEqH,EAAO3N,SAAWuG,EAAEoH,EAAO3N,WACpC6N,EAAM,GAEDA,IAEJvH,EAAEqH,EAAO3N,SAAWuG,EAAEoH,EAAO3N,SAC9B6N,EAAM,EAECvH,EAAEqH,EAAO3N,SAAWuG,EAAEoH,EAAO3N,WACpC6N,GAAO,GAEFA,MAIbN,WAAYI,EAAO3N,QACnBwN,UAA+B,SAApB/L,EAAM+L,UAAuB,MAAQ,SAEpD,IAAK,iBACH,OAAO,GAAP,GACK/L,EADL,CAEEgM,eAAgB,CACd,CAAC5G,EAAE,EAAGC,EAAE1E,WAAWuL,EAAO3N,UAC1B,CAAC6G,EAAE,EAAGC,EAAE1E,WAAW,EAAEuL,EAAO3N,aAGlC,IAAK,iBACH,aACKyB,EADL,CAEE4I,UAAWsD,EAAO3N,UAEtB,IAAK,wBACH,aACKyB,EADL,CAEEoE,eAAgB8H,EAAO3N,UAE3B,IAAK,cACH,aACKyB,EADL,CAEEgC,YAAY,IAEhB,QACE,OAAOhC,IClJEqM,eAAgB,CAC7BpM,kBAAmBgM,KCKfK,GAAQC,YAAYC,GAAaC,OAAOC,8BAAgCD,OAAOC,gCAE/EC,GAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,IACf,kBAAC,EAAD,OAEFK,M","file":"static/js/main.14b7dcf1.chunk.js","sourcesContent":["export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransactions = (transactions) => (\n  {\n  type: \"ADD_TRANSACTIONS\",\n  payload: transactions\n  }\n)\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const addSplits = (data) => ({\n  type: \"ADD_SPLITS\",\n  payload: data\n})\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setSummary = (summary) => (\n  {\n    type: \"SET_SUMMARY\",\n    payload: summary\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n\nexport const setStockpage = (name) => ({\n  type: \"SEE_STOCK_PAGE\",\n  payload: name\n})\n\nexport const showExtraStockInfo = (name) => ({\n  type: \"SHOW_EXTRA_STOCK_INFO\",\n  payload: name\n})\n\nexport const renderData = () => ({\n  type: \"RENDER_DATA\"\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => {\n\n  const checkbox = () => {\n    if(transactiontype === \"Split\"){\n      return null;\n    }else{\n      return (\n        <input type=\"checkbox\" checked={included}\n        onClick={() => { include(index, date,included)}}\n        />\n      )\n    }\n  }\n\n  return (\n  <tr>\n    <td>\n      {checkbox()}\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n  )\n }\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter, name}) => {\n  var copyOfTransactions = [...transactions];\n  if(name !== \"\"){\n    copyOfTransactions = getNewTransactions(transactions, name);\n  }\n  return(\n    <table className=\"centering\">\n      <thead>\n          <tr>\n          <th> Included </th>\n          <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n          <th> Account </th>\n          <th> Transactiontype </th>\n          <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n          <th> Amount </th>\n          <th> Price </th>\n          <th> Total </th>\n          <th> Brokerage </th>\n          <th> Currency </th>\n          <th> Id </th>\n        </tr>\n      </thead>\n      <tbody>\n        {copyOfTransactions.map(item =>\n          <Transaction\n            {...item}\n          />\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  name: PropTypes.string.isRequired\n}\n\nexport const getNewTransactions = (transactions, name) => {\n  var newTransactions = [];\n  for(var entry of transactions){\n    if(entry.stockname === name){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  setOwned = (amount) => {\n    // Used when a share is splitted\n    this.amountOwned += parseFloat(amount);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ? parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*parseFloat(this.avgBought)) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\nimport {getNewTransactions} from './TransactionList'\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, name, renderData, splittedShares, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n\n  var copyOfTransactions = [...transactions];\n  // If we havespecified a particular stock to review summary on, disregard the rest\n  /*if(name !== \"\" && name !== \"all\"){\n    // Function is exported from TransactionList\n    copyOfTransactions = getNewTransactions(copyOfTransactions, name);\n  } */\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const handlesplits = () => {\n    // Find the negative transaction in the list either directly above or below\n    \n    if( splittedShares.length%2 === 1){\n      return // handle errors\n    }\n    for(var i = 0; i<splittedShares.length; i += 2){\n      var negative = parseFloat(splittedShares[i].amount) < 0 ? splittedShares[i] : splittedShares[i+1]; \n      var positive = parseFloat(splittedShares[i].amount) < 0 ? splittedShares[i+1] : splittedShares[i]; \n\n      var negativeStock = stockMap.get(negative.stockname);\n      var positiveStock = stockMap.get(positive.stockname);\n\n      if(negativeStock != null){\n        var avgBoughtBefore = parseFloat(negativeStock.avgBought.toFixed(2));\n        avgBoughtBefore /= Math.abs(negative.amount);\n        if(positiveStock != null){\n          positiveStock.addBuy(positive.amount, avgBoughtBefore, 0);\n        }\n      }\n    }\n  }\n\n  const HandleTransaction = (stock, transaction) => {\n    var constObject = Object.assign({}, transaction);\n    switch(constObject.transactiontype){\n      case 'Köp':\n        stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n        break;\n      case 'Sälj':\n        stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n        break;\n      case 'Utdelning':\n        stock.addDividents(constObject.amount, constObject.price);\n        break;\n      case 'Split':\n        break;\n      default: break;\n    }\n  };\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          HandleTransaction(stock, entry);\n        }\n        return null;\n      });\n      // Fix the average bought on the splitted stocks\n      handlesplits();\n      return null;\n  };\n\n  const renderSummary = () => {\n    for(var entry of stockMap.values()){\n      if(entry.name === name){\n        entries.push(entry);\n      }else if(name === null || name === \"\" || name === \"all\"){\n        entries.push(entry);\n      }\n    }\n    return(\n      entries.map(entry => {\n          entry.getProfits();\n          entry.roundDecimals();\n          totalProfit += parseFloat(entry.returnProfit())\n          setProfit(totalProfit)\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    stockMap.clear(),\n    summarize(copyOfTransactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th onClick={() => setFilter(\"stockname\")}>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary()}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  splittedShares: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired,\n  renderData: PropTypes.bool.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions,\n  renderData: state.TransactionsStore.renderData,\n  splittedShares: state.TransactionsStore.splits\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {Col} from 'react-bootstrap'\n\nconst Profit = ({profit, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  return (\n  <Col><p className=\"TotalProfit\"> Total Profit: {profit} </p></Col>\n  )\n}\n\nProfit.propTypes = {\n  profit: PropTypes.number.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit.toFixed(2)),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react'\nimport TransactionList from './TransactionList'\nimport DataSummary from './DataSummary'\nimport Profit from './Profit'\nimport {Container} from 'react-bootstrap'\n\nconst DataTables = () => {\n  return(\n    <Container>\n      <Profit/>\n      <DataSummary name=\"all\"/>\n      <TransactionList name=\"\"/>\n    </Container>\n  )\n}\n\nexport default DataTables\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {FaCoins, FaEllipsisH, FaAngleUp, FaAngleDown, FaListUl} from 'react-icons/fa'\nimport {setStockpage, showExtraStockInfo, renderData} from '../actions'\nimport {Link} from 'react-router-dom'\nimport { Container, Row, Col, } from 'react-bootstrap';\nimport TransactionList from './TransactionList'\n\nconst renderTransactions = (name) => {\n\n  return (\n    <Row className={\"transactionList\"}>\n      <Col>\n       <TransactionList name={name}/>\n      </Col>\n    </Row>\n  )\n}\n\nconst extraInfo = (entry, showExtraStock) => {\n  if(showExtraStock === entry.name){\n    return (\n      <Container>\n        <Row>\n          <Col> <p> B: {entry.sharesBought} @ {entry.avgBought} </p> </Col>\n          <Col> <p> S: {entry.sharesSold} @ {parseFloat(parseFloat(entry.sold)/parseFloat(entry.sharesSold)).toFixed(2)} </p> </Col>\n          <Col> <p> Dividents: {entry.divident} </p> </Col>\n        </Row>\n      </Container>\n    )\n  }else{\n    return null\n  }\n}\n\n\nconst renderWindows = (entries, setStockpage, setShowExtraStock, showExtraStock) => {\n  return(\n    entries.map(entry => {\n      const arrowIcon = showExtraStock === entry.name ? \n        <FaAngleUp onClick={() => setShowExtraStock(\"\") }></FaAngleUp> : \n        <FaAngleDown onClick={() => setShowExtraStock(entry.name) }></FaAngleDown>;\n      var divClass =  parseFloat(entry.profit) >= 0 ? \"SumWinProfit\" : \"SumLossProfit\";\n      var pColor = parseFloat(entry.profit) >= 0 ? \"greenText\" : \"redText\";\n        return (\n          <Container className={\"centering rubricArea inlineBlock StockSummaryWindow \" + divClass}>\n            <Row>\n              <Col> <p> {entry.name} </p> </Col>\n              <Col>\n                <p className={pColor}> {entry.profit}  <FaCoins className=\"sumWindowCoins\"/></p>\n              </Col>\n              <Col>\n                {arrowIcon}\n                <Link className=\"moreButton\" onClick={() => setStockpage(entry.name)} to=\"/StockPage\">\n                  <FaListUl className=\"moreButton\"/>\n                </Link>\n              </Col>\n            </Row>\n              {extraInfo(entry, showExtraStock)}\n          </Container>\n        )\n    })\n  )\n};\n\nconst StockSummaryWindows = ({summaries, setStockpage, setShowExtraStock, showExtraStock, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  return (\n    <Container>\n      {renderWindows(summaries, setStockpage, setShowExtraStock, showExtraStock)}\n    </Container>\n  )\n}\n\nStockSummaryWindows.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  setStockpage: PropTypes.func.isRequired,\n  setShowExtraStock: PropTypes.func.isRequired,\n  showExtraStock: PropTypes.string.isRequired,\n  renderData: PropTypes.bool.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries),\n  showExtraStock: state.TransactionsStore.showExtraStock,\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setStockpage: (name) => dispatch(setStockpage(name)),\n  setShowExtraStock: (name) => dispatch(showExtraStockInfo(name))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StockSummaryWindows)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {AreaChart,Label, ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip, Legend, linearGradient, Area, Brush, Line, BarChart, Bar} from 'recharts';\nimport { Container, Col } from 'react-bootstrap'\n\nconst OverallSummary = ({summaries, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  var averageTrade = 500;\n  var totalNonZeroTrades = 0;\n  for(var entry of summaries){\n    if(parseFloat(entry.profit) > 0 || parseFloat(entry.profit) < 0){\n      averageTrade += parseFloat(entry.profit);\n      totalNonZeroTrades++;\n    }\n  }\n  averageTrade = averageTrade/totalNonZeroTrades;\n  var averageColor = averageTrade > 0 ? \"#4CAF50\" : \"#BB1313\";\n  return (\n    <Col className=\"centering overAllChart\">\n      <ResponsiveContainer width=\"100%\" aspect={4/5}>\n        <BarChart data={summaries} layout=\"vertical\">\n          <XAxis type=\"number\">\n            <Label value=\"Total\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis dataKey=\"x\" type=\"category\"/>\n          <Brush layour=\"vertical\"/>\n          <Legend verticalAlign=\"top\" height={36}/>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Bar maxBarSize={10} dataKey=\"y\"/>\n        </BarChart>\n      </ResponsiveContainer>\n      <br></br>\n    </Col>\n  );\n}\n\nOverallSummary.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  renderData: PropTypes.bool.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  var tmp = [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newSummaries = [];\n  var index = 0;\n  for(var entry of tmp){\n    if(entry.profit === 0){\n      continue\n    }\n    var fillColor = \"#4CAF50\"\n    if(entry.profit < 0) {\n      fillColor = \"#BB1313\"\n    }\n    newSummaries.push({x: entry.name, y: Math.abs(entry.profit), fill: fillColor})\n    entry = null;\n    index++;\n  }\n  tmp = null;\n  return newSummaries;\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage, renderData, addTransactions, addSplits } from '../actions'\nimport TransactionList from './TransactionList';\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, renderData, addTransactions, addSplits, dispatch}) => {\n\n  const handleFileRead = (e) => {\n      var transactions = [];\n      var splits = [];\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        //parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        if(entry[2] === \"Split\"){\n          splits.push({\n            date: entry[0],\n            account: entry[1],\n            transactiontype: entry[2],\n            stockname: entry[3],\n            amount: entry[4],\n            price: entry[5],\n            total: entry[6],\n            brokerage: entry[7],\n            currency: entry[8],\n            id: entry[9],\n            included: true,\n            index: (i-1)\n          });\n        }\n        transactions.push({\n          date: entry[0],\n          account: entry[1],\n          transactiontype: entry[2],\n          stockname: entry[3],\n          amount: entry[4],\n          price: entry[5],\n          total: entry[6],\n          brokerage: entry[7],\n          currency: entry[8],\n          id: entry[9],\n          included: true,\n          index: (i-1)\n        })\n        // Attempting to speed up loading .csv file by sending all transactions as a chunk to reducer instead of one at a time.\n        // Meaning the application won't rerender every time a transaction is read\n        //addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n        lines[i] = null;\n        entry = null;\n      }\n      addTransactions(transactions);\n      addSplits(splits);\n    }\n\n  const handleFileChosen = (file) => {\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n      renderData();\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0])}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired,\n  addTransactions: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent)),\n  renderData: () => dispatch(renderData()),\n  addTransactions: transactions => dispatch(addTransactions(transactions)),\n  addSplits: splits => dispatch(addSplits(splits))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, BarChart, Bar} from 'recharts';\nimport {Col } from 'react-bootstrap';\n\nconst InvestedMoney = ({transactions,renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  return (\n    <Col lg=\"8\">\n      <BarChart width={1000} height={350} data={transactions}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n        <XAxis dataKey=\"x\" />\n        <YAxis />\n        <Brush />\n        <Legend verticalAlign=\"top\" height={36}/>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <Tooltip />\n        <Bar maxBarSize={10} name=\"Withrewed\"  dataKey=\"withrewed\" fill=\"#BB1313\" />\n        <Bar maxBarSize={10} name=\"Deposited\"  dataKey=\"deposited\" fill=\"#4CAF50\" />\n      </BarChart>\n      <br></br>\n    </Col>\n  );\n}\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return -1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return 1;\n      }else{\n        return 0;\n      }\n    })\n  var all = [];\n  for(var entry of tmp){\n    if(entry.transactiontype === \"Insättning\" || entry.transactiontype === \"Uttag\" ){\n      if(entry.transactiontype === \"Insättning\"){\n        all.push({x: entry.date, deposited: parseFloat(entry.total)})\n      }else{\n        all.push({x: entry.date, withrewed: parseFloat(Math.abs(entry.total))})\n      }\n    }\n  }\n  return all;\n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestedMoney)\n","import React from 'react'\nimport StockSummaryWindows from './StockSumWindows'\nimport OverallSummary from './graphs/OverallSummary'\nimport FileEntry from './FileEntry'\nimport Profit from './Profit'\nimport DataSummary from './DataSummary'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport InvestedMoney from './graphs/InvestedMoney'\n\nconst Home = () => {\n  return(\n    <Container>\n      <Container>\n        <Row>\n          <Col>\n            <FileEntry/>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={8} md={8} sd={12}>\n            <OverallSummary/>\n          </Col>\n          <Col className={\"centering\"}>\n            <Profit/>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <InvestedMoney/>          \n          </Col>\n        </Row>\n        <Row>\n          <Col>\n             <StockSummaryWindows />\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <DataSummary name=\"all\"/>\n      </Container>\n    </Container>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryLegend, VictoryLine, VictoryLabel, VictoryAxis, VictoryScatter, VictoryTooltip} from 'victory'\nimport {ScatterChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Scatter} from 'recharts';\nimport {Col } from 'react-bootstrap';\n\nconst StockBuySell = ({transactions, stockPage, dispatch}) => {\n\n  return (\n        <Col lg=\"8\">\n          <ScatterChart width={730} height={450}\n           margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"x\" name=\"index\" domain={['dataMin', 'dataMax']}/>\n            <YAxis dataKey=\"y\" name=\"price\"/>\n            <Tooltip />\n            <Legend />\n            <Scatter name=\"Buy / Dividents\" data={transactions.buys} fill=\"#4CAF50\" />\n            <Scatter name=\"Sell\" data={transactions.sells} fill=\"#BB1313\" />\n          </ScatterChart>\n        </Col>\n  );\n}\n\nStockBuySell.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  stockPage: PropTypes.string.isRequired\n}\n\nconst getTransactions = (transactions, stockPage) => {\n  var S = [];\n  var B = [];\n  for(var entry of transactions){\n    if(entry.stockname === stockPage && entry.included === true){\n      if(entry.transactiontype === \"Sälj\"){\n        S.push({x: entry.date, y: parseFloat(entry.price), index: entry.index})\n      }else{\n        B.push({x: entry.date, y: parseFloat(entry.price), index: entry.index})\n      }\n    }\n  }\n  // TODO: Sort by Date Ascending order. Doesnt work yet, think it needs to compare date object not string\n \n  return {buys: B, sells: S};\n}\n\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  stockPage: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockBuySell)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis} from 'victory'\nimport { Container, Col } from 'react-bootstrap'\n\nconst DividentBar = ({transactions, dividents, dispatch}) => {\n  var DividentSummary=[{x: \"dividents\",y: dividents, fill: \"#4CAF50\"}];\n  return (\n        <Col className=\"\">\n          <VictoryChart>\n              <VictoryBar\n              animate={{\n                  duration: 2000,\n                  onLoad: { duration: 1000 }\n              }}\n              \n              dataComponents={\n                  <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n              }\n              style={{\n                  data: {fill: ({ datum }) => datum.fill, width: 200, height: 400},\n              }}\n              data={DividentSummary}\n              labels={({datum}) => datum.y}\n              labelComponent={\n                  <VictoryLabel style={{\n                      fontSize: 50, fill:\"black\"    \n                  }} \n                  textAnchor=\"middle\" verticalAnchor=\"end\"\n                  dy={0}\n                  />\n              }\n              />\n              <VictoryAxis  style={{tickLabels: {fontSize: 25, padding :5}}}/>\n              <VictoryAxis tickFormat={() => ''}/>\n          </VictoryChart>\n        </Col>\n  );\n}\n\nDividentBar.propTypes = {\n    transactions: PropTypes.arrayOf(PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      account: PropTypes.string.isRequired,\n      transactiontype: PropTypes.string.isRequired,\n      stockname: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      total: PropTypes.string.isRequired,\n      brokerage: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      included: PropTypes.bool.isRequired,\n      index: PropTypes.number.isRequired\n    }).isRequired).isRequired,\n    dividents: PropTypes.number.isRequired,\n    addSummary: PropTypes.func.isRequired\n  }\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return 1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newTransactions = [];\n  for(var entry of tmp){\n    if(entry.name === name && entry.transactiontype === \"Utdelning\"){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst getSummary = (summaries, name) => {\n    for(var entry of summaries){\n        if(entry.name === name){\n            return entry.divident;\n        }\n    }\n    return 0; // No summary with the name we are looking for found \n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  dividents: getSummary(state.TransactionsStore.summaries, state.TransactionsStore.stockPage)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DividentBar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StockBuySell from './graphs/StockBuySell';\nimport DividentBar from './graphs/DividentBar';\nimport DataSummary from './DataSummary';\nimport TransactionList from './TransactionList'\n\n\nconst StockPage = ({name, dispatch}) => {\n  return(\n    <Container className={\"fullScreenWidth\"}>\n\n      <Row>\n        <Col lg={5} md={12} sm={12}> \n          <Row><Col> <DataSummary name={name}/></Col></Row>\n          <Row> <StockBuySell/> </Row>\n          <Row > <DividentBar/> </Row>\n        </Col>\n        <Col lg={7} md={12} sm={12}> \n          <TransactionList name={name}/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nStockPage.propTypes = {\n  name: PropTypes.string.isRequired\n}\n\n\nconst mapStateToProps = (state) => ({\n  name: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockPage)\n","import Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {BrowserRouter, Route, Switch, Link, Redirect} from 'react-router-dom'\n\nimport DataTables from './DataTables'\nimport Home from './Home'\nimport StockPage from './StockPage'\nimport { setStockpage } from '../actions'\n\nconst MyNavBar = ({setStockpage, summaries, dispatch}) => {\n\n  const items = (summaries) => {\n    return(\n      summaries.map(entry => {\n        var url = \"/StockPage\";\n        return(\n          <NavDropdown.Item className=\"navCenter\"><Link onClick={() => setStockpage(entry.name)} to={url}>{entry.name}</Link></NavDropdown.Item>\n        )\n      })\n    )\n  }\n\n  return(\n    <BrowserRouter>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">Trade Summary</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto navCenter\">\n            <Link className=\"navCenter\" to=\"/Home\">Home</Link>\n            <Link className=\"navCenter\" to=\"/DataTables\">Data Tables</Link>\n          </Nav>\n          <Nav>\n            <Link className=\"navCenter\" to=\"#About\">About</Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Switch>\n        <Route exact from=\"/\" component={Home} />\n        <Route exact path=\"/Home\" component={Home} />\n        <Route path=\"/DataTables\" component={DataTables} />\n        <Route path=\"/StockPage\" component={StockPage} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nMyNavBar.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"name\"]) < parseFloat(b[\"name\"])){\n        return 1;\n      }else if(parseFloat(a[\"name\"]) > parseFloat(b[\"name\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setStockpage: (name) => dispatch(setStockpage(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNavBar);\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MyNavBar from './components/MyNavBar'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n    integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\n    integrity=\"sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ\"\n    crossorigin=\"anonymous\"></script>\n\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"\n    integrity=\"sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm\"\n    crossorigin=\"anonymous\"></script>\n\n      <MyNavBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: [{x:1, y: 0},{x:2, y:100}],\n  stockPage: \"\",\n  showExtraStock: \"\", // Decides which stock should render extra information\n  renderData: false,\n  splits: []\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    // Add whole chunk of transactions\n    case 'ADD_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: action.payload\n      }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'ADD_SPLITS':\n    return {\n      ...state,\n      splits: action.payload\n    };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        splits: [],\n        profit: 0,\n        sortFilter: \"date\",\n        sortOrder: \"DESC\",\n        readPercentage: [{x:1, y: 0},{x:2, y:100}],\n        stockPage: \"\",\n        showExtraStock: \"\", // Decides which stock should render extra information\n        renderData: false\n      }\n    case 'ADD_SUMMARY':\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_SUMMARY':\n      return{\n        ...state,\n        summaries:\n         state.summaries.map(summary =>\n          (summary.name === action.payload.name)\n            ? action.payload\n            : summary\n          )\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          var res = 0;\n          if(action.payload === state.sortFilter){\n            return res;\n          }\n          else{\n            if(state.sortOrder === \"DESC\"){\n              if(a[action.payload] < b[action.payload]) {\n                res = -1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = 1;\n              }\n              return res;\n            }else{\n              if(a[action.payload] < b[action.payload]) {\n                res = 1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = -1;\n              }\n              return res;\n            }\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: [\n          {x:1, y:parseFloat(action.payload)},\n          {x:2, y:parseFloat(1-action.payload)}\n        ]\n      }\n    case 'SEE_STOCK_PAGE':\n      return{\n        ...state,\n        stockPage: action.payload\n      }\n    case 'SHOW_EXTRA_STOCK_INFO':\n      return{\n        ...state,\n        showExtraStock: action.payload\n      }\n    case 'RENDER_DATA':\n      return{\n        ...state,\n        renderData: true\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}