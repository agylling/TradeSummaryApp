{"version":3,"sources":["actions/index.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","components/DataTables.js","components/StockSumWindows.js","components/graphs/OverallSummary.js","components/FileEntry.js","components/graphs/InvestedMoney.js","components/graphs/PieSummary.js","components/Home.js","components/graphs/StockBuySell.js","components/graphs/DividentBar.js","components/StockPage.js","components/Graphs.js","components/MyNavBar.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["setSortFilter","order","type","payload","setStockpage","name","connect","dispatch","include","index","date","included","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","checked","onClick","getNewTransactions","transactions","newTransactions","entry","push","state","TransactionsStore","setFilter","filter","copyOfTransactions","className","map","item","Stock","addBuy","paid","parseFloat","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","setOwned","getProfits","totalSold","profit","returnProfit","printInformation","keyIndex","toFixed","roundDecimals","this","ShareSummary","stock","renderData","splittedShares","splits","addSummary","setProfit","home","stockMap","Map","entries","totalProfit","clear","has","set","get","transaction","constObject","Object","assign","HandleTransaction","length","i","negative","positive","negativeStock","positiveStock","avgBoughtBefore","Math","abs","handlesplits","summarize","values","key","renderSummary","Col","DataTables","Container","renderWindows","setShowExtraStock","showExtraStock","arrowIcon","divClass","pColor","Row","to","extraInfo","summaries","sort","a","b","showExtraStockInfo","getSummaries","tmp","newSummaries","fillColor","x","y","fill","averageTrade","averageNegative","totalLosses","averagePositive","totalProfits","totalNonZeroTrades","width","aspect","data","layout","barCategoryGap","barGap","ataKey","tick","hide","value","offset","position","strokeDasharray","maxBarSize","dataKey","fileReader","FileReader","addTransaction","transactionType","removeTransactions","setPercentage","percent","addTransactions","addSplits","uniqueCompanies","handleFileRead","e","preventDefault","content","result","lines","replace","split","undefined","Date","keys","obj","parseInt","accept","onChange","file","target","files","onloadend","readAsText","getTransactions","all","deposited","withrewed","meanDeposited","countDeposits","witrewed","margin","top","right","left","bottom","verticalAlign","height","newsummaries","COLORS","cx","cy","innerRadius","outerRadius","paddingAngle","Home","lg","md","sd","stockPage","S","B","buys","sells","domain","getSummary","dividents","DividentSummary","animate","duration","onLoad","dataComponents","events","onMouseOver","console","log","style","datum","labels","labelComponent","fontSize","textAnchor","verticalAnchor","dy","tickLabels","padding","tickFormat","sm","Graphs","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","Nav","exact","from","component","path","StockPage","App","src","integrity","crossOrigin","defaultState","sortFilter","sortOrder","readPercentage","transactionsReducer","action","summary","res","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c6eb11e.chunk.js","sourcesContent":["export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransactions = (transactions) => (\n  {\n  type: \"ADD_TRANSACTIONS\",\n  payload: transactions\n  }\n)\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const addSplits = (data) => ({\n  type: \"ADD_SPLITS\",\n  payload: data\n})\n\nexport const setTransactions = (data) => ({\n  type: \"SET_TRANSACTIONS\",\n  payload: data\n})\n\nexport const removeTransactions = (data) => ({\n  type: \"REMOVE_TRANSACTIONS\"\n})\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setSummary = (summary) => (\n  {\n    type: \"SET_SUMMARY\",\n    payload: summary\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n\nexport const setSortFilter = (order) => ({\n  type: \"SORT_FILTER\",\n  payload: order\n})\n\nexport const setPercentage = (percent) => ({\n  type: \"SET_PERCENTAGE\",\n  payload: percent\n})\n\nexport const setStockpage = (name) => ({\n  type: \"SEE_STOCK_PAGE\",\n  payload: name\n})\n\nexport const showExtraStockInfo = (name) => ({\n  type: \"SHOW_EXTRA_STOCK_INFO\",\n  payload: name\n})\n\nexport const renderData = () => ({\n  type: \"RENDER_DATA\"\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => {\n\n  const checkbox = () => {\n    if(transactiontype === \"Split\"){\n      return null;\n    }else{\n      return (\n        <input type=\"checkbox\" checked={included}\n        onClick={() => { include(index, date,included)}}\n        />\n      )\n    }\n  }\n\n  return (\n  <tr>\n    <td>\n      {checkbox()}\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n  )\n }\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\nimport { setSortFilter } from '../actions'\nimport { FaArrowDown } from 'react-icons/fa'\n\nconst TransactionList = ({ transactions, setFilter, name}) => {\n  var copyOfTransactions = [...transactions];\n  if(name !== \"\"){\n    copyOfTransactions = getNewTransactions(transactions, name);\n  }\n  return(\n    <table className=\"centering\">\n      <thead>\n          <tr>\n          <th> Included </th>\n          <th className=\"sort\" onClick={() => setFilter(\"date\")}> <FaArrowDown/> Date </th>\n          <th> Account </th>\n          <th> Transactiontype </th>\n          <th className=\"sort\" onClick={() => setFilter(\"stockname\")}> <FaArrowDown/> Name  </th>\n          <th> Amount </th>\n          <th> Price </th>\n          <th> Total </th>\n          <th> Brokerage </th>\n          <th> Currency </th>\n          <th> Id </th>\n        </tr>\n      </thead>\n      <tbody>\n        {copyOfTransactions.map(item =>\n          <Transaction\n            {...item}\n          />\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  name: PropTypes.string.isRequired\n}\n\nexport const getNewTransactions = (transactions, name) => {\n  var newTransactions = [];\n  for(var entry of transactions){\n    if(entry.stockname === name){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setFilter: filter => dispatch(setSortFilter(filter))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  setOwned = (amount) => {\n    // Used when a share is splitted\n    this.amountOwned += parseFloat(amount);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ? parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*parseFloat(this.avgBought)) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = (keyIndex) => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit, setSortFilter} from '../actions'\nimport {getNewTransactions} from './TransactionList'\n\nconst DataSummary = ({transactions, addSummary, setProfit, setFilter, name, renderData, splittedShares, home, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n\n  var copyOfTransactions = [...transactions];\n  // If we havespecified a particular stock to review summary on, disregard the rest\n  /*if(name !== \"\" && name !== \"all\"){\n    // Function is exported from TransactionList\n    copyOfTransactions = getNewTransactions(copyOfTransactions, name);\n  } */\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const handlesplits = () => {\n    // Find the negative transaction in the list either directly above or below\n    \n    if( splittedShares.length%2 === 1){\n      return // handle errors\n    }\n    for(var i = 0; i<splittedShares.length; i += 2){\n      var negative = parseFloat(splittedShares[i].amount) < 0 ? splittedShares[i] : splittedShares[i+1]; \n      var positive = parseFloat(splittedShares[i].amount) < 0 ? splittedShares[i+1] : splittedShares[i]; \n\n      var negativeStock = stockMap.get(negative.stockname);\n      var positiveStock = stockMap.get(positive.stockname);\n\n      if(negativeStock != null){\n        var avgBoughtBefore = parseFloat(negativeStock.avgBought.toFixed(2));\n        avgBoughtBefore /= Math.abs(negative.amount);\n        if(positiveStock != null){\n          positiveStock.addBuy(positive.amount, avgBoughtBefore, 0);\n        }\n      }\n    }\n  }\n\n  const HandleTransaction = (stock, transaction) => {\n    var constObject = Object.assign({}, transaction);\n    switch(constObject.transactiontype){\n      case 'Köp':\n        stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n        break;\n      case 'Sälj':\n        stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n        break;\n      case 'Utdelning':\n        stock.addDividents(constObject.amount, constObject.price);\n        break;\n      case 'Split':\n        break;\n      default: break;\n    }\n  };\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          HandleTransaction(stock, entry);\n        }\n        return null;\n      });\n      // Fix the average bought on the splitted stocks\n      handlesplits();\n      return null;\n  };\n\n  const renderSummary = () => {\n    for(var entry of stockMap.values()){\n      if(entry.name === name){\n        entries.push(entry);\n      }else if(name === null || name === \"\" || name === \"all\"){\n        entries.push(entry);\n      }\n    }\n    return(\n      entries.map(entry => {\n          entry.getProfits();\n          entry.roundDecimals();\n          totalProfit += parseFloat(entry.returnProfit())\n          setProfit(totalProfit)\n          if(home === true){\n            return null\n          }\n          return <ShareSummary key={entry.name} {...entry}/>\n      })\n    )\n  };\n\n  const thead = () => {\n    // If we are on front page, dont render the tables, but needed to calculate all the data for redux\n    if(home === true){\n      return null;\n    }else{\n      return(\n        <thead>\n        <tr>\n          <th onClick={() => setFilter(\"stockname\")}>Name</th>\n          <th>Bought</th>\n          <th>@avg</th>\n          <th>Total</th>\n          <th>Sold</th>\n          <th>@avg</th>\n          <th>Total</th>\n          <th>Dividents</th>\n          <th>Brokerage</th>\n          <th>Profit</th>\n        </tr>\n      </thead>\n      )\n    }\n  }\n  return(\n    stockMap.clear(),\n    summarize(copyOfTransactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n          {thead()}\n        <tbody>\n         {renderSummary()}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  splittedShares: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired,\n  renderData: PropTypes.bool.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions,\n  renderData: state.TransactionsStore.renderData,\n  splittedShares: state.TransactionsStore.splits\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit)),\n  setFilter: filter => dispatch(setSortFilter(filter)),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {Col} from 'react-bootstrap'\n\nconst Profit = ({profit, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  return (\n  <Col><p className=\"TotalProfit\"> Total Profit: {profit} </p></Col>\n  )\n}\n\nProfit.propTypes = {\n  profit: PropTypes.number.isRequired\n}\n\nconst mapStateToProps = state => ({\n  profit: parseFloat(state.TransactionsStore.profit.toFixed(2)),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react'\nimport TransactionList from './TransactionList'\nimport DataSummary from './DataSummary'\nimport Profit from './Profit'\nimport {Container} from 'react-bootstrap'\n\nconst DataTables = () => {\n  return(\n    <Container>\n      <Profit/>\n      <DataSummary name=\"all\"/>\n      <TransactionList name=\"\"/>\n    </Container>\n  )\n}\n\nexport default DataTables\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {FaCoins, FaAngleUp, FaAngleDown, FaListUl} from 'react-icons/fa'\nimport {setStockpage, showExtraStockInfo} from '../actions'\nimport {Link} from 'react-router-dom'\nimport { Container, Row, Col, } from 'react-bootstrap';\n\nconst extraInfo = (entry, showExtraStock) => {\n  if(showExtraStock === entry.name){\n    return (\n      <Row>\n        <Col> <p> B: {entry.sharesBought} @ {entry.avgBought} </p> </Col>\n        <Col> <p> S: {entry.sharesSold} @ {parseFloat(parseFloat(entry.sold)/parseFloat(entry.sharesSold)).toFixed(2)} </p> </Col>\n        <Col> <p> Dividents: {entry.divident} </p> </Col>\n      </Row>\n    )\n  }else{\n    return null\n  }\n}\n\n\nconst renderWindows = (entries, setStockpage, setShowExtraStock, showExtraStock) => {\n  return(\n    entries.map(entry => {\n      const arrowIcon = showExtraStock === entry.name ? \n        <FaAngleUp onClick={() => setShowExtraStock(\"\") }></FaAngleUp> : \n        <FaAngleDown onClick={() => setShowExtraStock(entry.name) }></FaAngleDown>;\n      var divClass =  parseFloat(entry.profit) >= 0 ? \"SumWinProfit\" : \"SumLossProfit\";\n      var pColor = parseFloat(entry.profit) >= 0 ? \"greenText\" : \"redText\";\n        return (\n          <Container key={entry.name} className={\"centering rubricArea inlineBlock StockSummaryWindow \" + divClass}>\n            <Row>\n              <Col> <p> {entry.name} </p> </Col>\n              <Col>\n                <p className={pColor}> {entry.profit}  <FaCoins className=\"sumWindowCoins\"/></p>\n              </Col>\n              <Col>\n                {arrowIcon}\n                <Link className=\"moreButton\" onClick={() => setStockpage(entry.name)} to=\"/StockPage\">\n                  <FaListUl className=\"moreButton\"/>\n                </Link>\n              </Col>\n            </Row>\n              {extraInfo(entry, showExtraStock)}\n          </Container>\n        )\n    })\n  )\n};\n\nconst StockSummaryWindows = ({summaries, setStockpage, setShowExtraStock, showExtraStock, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  return (\n    <Container>\n      {renderWindows(summaries, setStockpage, setShowExtraStock, showExtraStock)}\n    </Container>\n  )\n}\n\nStockSummaryWindows.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  setStockpage: PropTypes.func.isRequired,\n  setShowExtraStock: PropTypes.func.isRequired,\n  showExtraStock: PropTypes.string.isRequired,\n  renderData: PropTypes.bool.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries),\n  showExtraStock: state.TransactionsStore.showExtraStock,\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setStockpage: (name) => dispatch(setStockpage(name)),\n  setShowExtraStock: (name) => dispatch(showExtraStockInfo(name))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(StockSummaryWindows)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {Label, ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip, Brush, BarChart, Bar} from 'recharts';\nimport { Container,Row, Col } from 'react-bootstrap'\n\nconst OverallSummary = ({summaries, renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  var averageTrade = 0;\n  var averageNegative = 0;\n  var totalLosses = 0;\n  var averagePositive = 0;\n  var totalProfits = 0;\n  var totalNonZeroTrades = 0;\n  for(var entry of summaries){\n    if(parseFloat(entry.y) > 0 || parseFloat(entry.y) < 0){\n      averageTrade += parseFloat(entry.y);\n      totalNonZeroTrades++;\n      if(entry.fill === \"#BB1313\"){\n        averageNegative -= parseFloat(entry.y);\n        totalLosses++;\n      }else{\n        averagePositive += parseFloat(entry.y);\n        totalProfits++;\n      }\n    }\n  }\n\n  averageTrade = averageTrade/totalNonZeroTrades;\n  averagePositive /= totalProfits;\n  averageNegative /= totalLosses;\n\n  return (\n    <Container>\n      <Row>\n        <ResponsiveContainer width=\"100%\" aspect={4/3}>\n          <BarChart \n            data={summaries} \n            layout=\"horizontal\"\n            barCategoryGap={1}\n            barGap={1}\n          >\n            <XAxis ataKey=\"x\" type=\"category\" tick={false} hide={false}>\n              <Label value=\"Stock\" offset={0} position=\"insideBottom\" />\n            </XAxis>\n            <YAxis  type=\"number\">\n              <Label value=\"Total\" offset={0} position=\"insideLeft\" />\n            </YAxis>\n            {summaries.length > 0 && <Brush />}\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <Tooltip />\n            <Bar name=\"Total\" maxBarSize={10} dataKey=\"y\"/>\n          </BarChart>\n        </ResponsiveContainer>\n      </Row>\n      <br></br>\n      <Row>\n        <Col><p className=\"GraphSummaries\"> Total Mean Trade: {averageTrade.toFixed(2)}  </p></Col>\n      </Row>\n      <Row>\n        <Col>\n          <Row><p className=\"GraphSummaries loss\"> #Losses: {totalLosses}  </p></Row>\n          <Row><p className=\"GraphSummaries loss\"> Mean Loss: {averageNegative.toFixed(2)}  </p></Row>\n        </Col>\n        <Col>\n          <Row><p className=\"GraphSummaries profit\"> #Profits: {totalProfits}  </p> </Row>\n          <Row><p className=\"GraphSummaries profit\"> Mean Profit: {averagePositive.toFixed(2)}  </p> </Row>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nOverallSummary.propTypes = {\n  renderData: PropTypes.bool.isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  var tmp = [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n        return 1;\n      }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newSummaries = [];\n  for(var entry of tmp){\n    if(entry.profit === 0){\n      continue\n    }\n    var fillColor = \"#4CAF50\"\n    if(entry.profit < 0) {\n      fillColor = \"#BB1313\"\n    }\n    newSummaries.push({x: entry.name, y: Math.abs(entry.profit), fill: fillColor})\n    entry = null;\n  }\n  tmp = null;\n  return newSummaries;\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OverallSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction, removeTransactions, setPercentage, renderData, addTransactions, addSplits } from '../actions'\nimport { Container, Row } from 'react-bootstrap';\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, removeTransactions, setPercentage, renderData, addTransactions, addSplits, dispatch}) => {\n  var uniqueCompanies = new Map();\n  var stockMap = new Map(); // Used to merge with transactions later, easier to remove last buy transactions\n\n  const handleFileRead = (e) => {\n      var transactions = [];\n      var splits = [];\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        //parseFloat(setPercentage(parseFloat(i)/parseFloat(lines.length)));\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        if(entry[2] === \"Split\"){\n          splits.push({\n            date: entry[0],\n            account: entry[1],\n            transactiontype: entry[2],\n            stockname: entry[3],\n            amount: entry[4],\n            price: entry[5],\n            total: entry[6],\n            brokerage: entry[7],\n            currency: entry[8],\n            id: entry[9],\n            included: true,\n            index: (i-1)\n          });\n        }\n        if(uniqueCompanies.get(entry[3]) === undefined){\n          uniqueCompanies.set(entry[3], {index: -1, date: new Date(\"1800-01-01\")});\n          stockMap.set(entry[3], []);\n        }\n        if(entry[2] === \"Sälj\" && new Date(entry[0]) - uniqueCompanies.get(entry[3]).date > 0){\n          uniqueCompanies.set(entry[3], {index: (i-1), date: new Date(entry[0])});\n        }\n        stockMap.get(entry[3]).push(\n          {\n            date: entry[0],\n            account: entry[1],\n            transactiontype: entry[2],\n            stockname: entry[3],\n            amount: entry[4],\n            price: entry[5],\n            total: entry[6],\n            brokerage: entry[7],\n            currency: entry[8],\n            id: entry[9],\n            included: true,\n            index: (i-1)\n          }\n        )\n        // Attempting to speed up loading .csv file by sending all transactions as a chunk to reducer instead of one at a time.\n        // Meaning the application won't rerender every time a transaction is read\n        //addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n        lines[i] = null;\n        entry = null;\n      }\n      // Remove all buy transactions that come after the last sell to not skew avhBought price\n      for(var obj of uniqueCompanies.keys()){\n        for(var transaction of stockMap.get(obj)){\n          if(parseInt(uniqueCompanies.get(obj).index) !== -1 && transaction.transactiontype === \"Köp\" && new Date(transaction.date) - uniqueCompanies.get(obj).date > 0){\n            transaction.included = false;\n          }\n          transactions.push(transaction);\n        }\n      }\n      stockMap = null;\n      uniqueCompanies = null;\n      addTransactions(transactions);\n      addSplits(splits);\n    }\n\n  const handleFileChosen = (file) => {\n      uniqueCompanies = new Map();\n      stockMap = new Map();\n      removeTransactions();\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n      renderData();\n  }\n\n  return(\n    <Container className=\"\">\n      <div className=\"centering inputDiv\">\n        <Row>\n          <input type='file'\n                id='file'\n                className='inputButton'\n                accept='.csv'\n                onChange={e => handleFileChosen(e.target.files[0])}\n          />\n          <p className=\"centering fileText\"> Click: enter .csv file here</p>\n       </Row>\n      </div>\n    </Container>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired,\n  addTransactions: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index)),\n  removeTransactions: () => dispatch(removeTransactions()),\n  setPercentage: (percent) => dispatch(setPercentage(percent)),\n  renderData: () => dispatch(renderData()),\n  addTransactions: transactions => dispatch(addTransactions(transactions)),\n  addSplits: splits => dispatch(addSplits(splits))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport {ResponsiveContainer, Label, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Brush, BarChart, Bar} from 'recharts';\nimport {Container, Row, Col } from 'react-bootstrap';\n\nconst InvestedMoney = ({transactions,renderData, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n  var meanDeposited = 0;\n  var countDeposits = 0;\n  for(var entry of transactions){\n    if(entry.deposited){\n      meanDeposited += parseFloat(entry.deposited);\n    }else if(entry.witrewed){\n      meanDeposited += parseFloat(entry.deposited);\n    }\n    countDeposits++;\n  }\n  meanDeposited /= countDeposits;\n  return (\n    <Container>\n      <Row>\n        <ResponsiveContainer width=\"100%\" aspect={4/3}>\n        <BarChart data={transactions}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <XAxis dataKey=\"x\">\n            <Label value=\"Transactions over time\" offset={0} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis />\n          {transactions.length > 0 && <Brush />}\n          <Legend verticalAlign=\"top\" height={36}/>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Bar maxBarSize={10} name=\"Withrewed\"  dataKey=\"withrewed\" fill=\"#BB1313\" />\n          <Bar maxBarSize={10} name=\"Deposited\"  dataKey=\"deposited\" fill=\"#4CAF50\" />\n        </BarChart>\n      </ResponsiveContainer>\n      </Row>\n      <Row>\n        <br></br>\n        <Col><p className=\"GraphSummaries\"> Mean Deposits: {meanDeposited.toFixed(2)}  </p></Col>\n      </Row>\n    </Container>\n  );\n}\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return -1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return 1;\n      }else{\n        return 0;\n      }\n    })\n  var all = [];\n  for(var entry of tmp){\n    if(entry.transactiontype === \"Insättning\" || entry.transactiontype === \"Uttag\" ){\n      if(entry.transactiontype === \"Insättning\"){\n        all.push({x: entry.date, deposited: parseFloat(entry.total)})\n      }else{\n        all.push({x: entry.date, withrewed: parseFloat(Math.abs(entry.total))})\n      }\n    }\n  }\n  return all;\n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions),\n  renderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestedMoney)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport {ResponsiveContainer,Cell, Tooltip, PieChart, Pie} from 'recharts';\nimport {Container, Row, Col } from 'react-bootstrap';\n\nconst PieSummary = ({summaries,renderData, dataKey, dispatch}) => {\n  if(renderData === false){\n    return (null);\n  }\n\n  const COLORS = [\n    \"#ff0000\", \"#ff8c00\", \"#c2f249\", \"#00ffff\",\n    \"#0077e6\", \"#de6df2\", \"#59000a\", \"#f20000\",\n    \"#bf9056\", \"#276600\", \"#00bfbf\", \"#344b73\",\n    \"#733464\", \"#8c000c\", \"#ff8873\", \"#ffb300\",\n    \"#00ff26\", \"#00a6a6\", \"#4d61ff\", \"#ff00a2\",\n    \"#733439\", \"#bf561d\", \"#332500\", \"#73ff91\",\n    \"#005259\", \"#0b0a40\", \"#40001e\", \"#662500\",\n    \"#f2de6d\", \"#0f3322\", \"#00b4e6\", \"#4400ff\",\n    \"#a6004b\", \"#66462e\", \"#57591b\", \"#11734a\",\n    \"#002033\", \"#481173\", \"#ff0051\"\n  ];\n\n  var totalBought = 0;\n  var totalSold = 0;\n  for(var entry of summaries){\n    totalBought += parseFloat(entry.paid);\n    totalSold += parseFloat(entry.sold);\n  }\n\n  const renderBought = () => {\n    console.log(\"totalBought: \" + totalBought);\n    return (\n        <Col>\n            <p className=\"GraphSummaries\"> Total spend: {totalBought.toFixed(2)}  </p>\n        </Col>\n    )\n  }\n\n  const renderSold = () => {\n    console.log(\"totalSold: \" + totalSold);\n    return (\n        <Col>\n            <p className=\"GraphSummaries\"> Total sold: {totalSold.toFixed(2)}  </p>\n        </Col>\n    )\n  }\n\n  const RenderInfo = () => {\n    if(dataKey === \"paid\"){\n        return renderBought();\n    }else if(dataKey === \"sold\"){\n        return renderSold();\n    }else{\n        return null;\n    }\n  }\n\n  return (\n    <Container>\n      <Row>\n        <ResponsiveContainer width=\"100%\" aspect={3/2}>\n                <PieChart >\n                    <Tooltip/>\n                    <Pie\n                        data={summaries} \n                        cx=\"50%\" \n                        cy=\"50%\" \n                        innerRadius={50}\n                        outerRadius={250} \n                        fill=\"#8884d8\"\n                        paddingAngle={0}\n                        dataKey={dataKey}\n                        >\n                        {\n                        summaries.map((entry, index) => <Cell key={index} fill={COLORS[index % COLORS.length]}/>)\n                        }\n                    </Pie>\n                </PieChart>\n        </ResponsiveContainer>\n      </Row>\n    </Container>\n  );\n}\n\nPieSummary.propTypes = {\n    summaries: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      amountOwned: PropTypes.number.isRequired,\n      paid: PropTypes.number.isRequired,\n      sharesBought: PropTypes.number.isRequired,\n      sold: PropTypes.number.isRequired,\n      sharesSold: PropTypes.number.isRequired,\n      avgBought: PropTypes.number.isRequired,\n      divident: PropTypes.number.isRequired,\n      profit: PropTypes.number.isRequired,\n      brokerage: PropTypes.number.isRequired\n    }).isRequired).isRequired,\n    dataKey: PropTypes.string.isRequired,\n    renderData: PropTypes.bool.isRequired\n}\n\nconst getSummaries = (summaries) => {\n  var newsummaries = [...summaries].sort((a,b) =>{\n    if(parseFloat(a[\"profit\"]) < parseFloat(b[\"profit\"])){\n      return 1;\n    }else if(parseFloat(a[\"profit\"]) > parseFloat(b[\"profit\"])){\n      return -1;\n    }else{\n      return 0;\n    }\n  }) \n  var tmp = [];\n  for(var i = 0; i<summaries.length; i++){\n    if(i > 9){\n      break;\n    }\n    tmp.push(newsummaries[i]);\n  }\n  return tmp;\n}\n\nconst mapStateToProps = (state) => ({\nsummaries: getSummaries(state.TransactionsStore.summaries),\nrenderData: state.TransactionsStore.renderData\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PieSummary)\n","import React from 'react'\nimport StockSummaryWindows from './StockSumWindows'\nimport OverallSummary from './graphs/OverallSummary'\nimport FileEntry from './FileEntry'\nimport Profit from './Profit'\nimport DataSummary from './DataSummary'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport InvestedMoney from './graphs/InvestedMoney'\nimport PieSummary from './graphs/PieSummary'\n\nconst Home = () => {\n  return(\n    <Container>\n      <Container>\n        <Row>\n          <Col>\n            <FileEntry/>\n          </Col>\n        </Row>\n        <Col className={\"centering\"}>\n          <Profit/>\n        </Col>\n      </Container>\n      <Container>  \n        <Row>\n          <Col lg={12} md={12} sd={12}>\n             <StockSummaryWindows />\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <DataSummary name=\"all\" home={true}/>\n      </Container>\n    </Container>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {ScatterChart,ResponsiveContainer, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Scatter} from 'recharts';\nimport {Container } from 'react-bootstrap';\n\nconst StockBuySell = ({transactions, stockPage, dispatch}) => {\n\n  return (\n        <Container>\n          <ResponsiveContainer width=\"100%\" aspect={4/3}>\n            <ScatterChart>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"x\" name=\"index\" domain={['dataMin', 'dataMax']}/>\n              <YAxis dataKey=\"y\" name=\"price\"/>\n              <Tooltip />\n              <Legend />\n              <Scatter name=\"Buy / Dividents\" data={transactions.buys} fill=\"#4CAF50\" />\n              <Scatter name=\"Sell\" data={transactions.sells} fill=\"#BB1313\" />\n            </ScatterChart>\n          </ResponsiveContainer>\n        </Container>\n  );\n}\n\nStockBuySell.propTypes = {\n  stockPage: PropTypes.string.isRequired\n}\n\nconst getTransactions = (transactions, stockPage) => {\n  var S = [];\n  var B = [];\n  for(var entry of transactions){\n    if(entry.stockname === stockPage && entry.included === true){\n      if(entry.transactiontype === \"Sälj\"){\n        S.push({x: entry.date, y: parseFloat(entry.price), index: entry.index})\n      }else{\n        B.push({x: entry.date, y: parseFloat(entry.price), index: entry.index})\n      }\n    }\n  }\n  // TODO: Sort by Date Ascending order. Doesnt work yet, think it needs to compare date object not string\n \n  return {buys: B, sells: S};\n}\n\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  stockPage: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockBuySell)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {VictoryChart, VictoryBar, Bar, VictoryLabel, VictoryAxis} from 'victory'\nimport { Container } from 'react-bootstrap'\n\nconst DividentBar = ({transactions, dividents, dispatch}) => {\n  var DividentSummary=[{x: \"dividents\",y: dividents, fill: \"#4CAF50\"}];\n  return (\n        <Container className=\"\">\n          <VictoryChart>\n              <VictoryBar\n              animate={{\n                  duration: 2000,\n                  onLoad: { duration: 1000 }\n              }}\n              \n              dataComponents={\n                  <Bar events={{onMouseOver: () => console.log(\"mouseover\")}}/>\n              }\n              style={{\n                  data: {fill: ({ datum }) => datum.fill, width: 200, height: 400},\n              }}\n              data={DividentSummary}\n              labels={({datum}) => datum.y}\n              labelComponent={\n                  <VictoryLabel style={{\n                      fontSize: 50, fill:\"black\"    \n                  }} \n                  textAnchor=\"middle\" verticalAnchor=\"end\"\n                  dy={0}\n                  />\n              }\n              />\n              <VictoryAxis  style={{tickLabels: {fontSize: 25, padding :5}}}/>\n              <VictoryAxis tickFormat={() => ''}/>\n          </VictoryChart>\n        </Container>\n  );\n}\n\nDividentBar.propTypes = {\n    transactions: PropTypes.arrayOf(PropTypes.shape({\n      date: PropTypes.string.isRequired,\n      account: PropTypes.string.isRequired,\n      transactiontype: PropTypes.string.isRequired,\n      stockname: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      price: PropTypes.string.isRequired,\n      total: PropTypes.string.isRequired,\n      brokerage: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      included: PropTypes.bool.isRequired,\n      index: PropTypes.number.isRequired\n    }).isRequired).isRequired,\n    dividents: PropTypes.number.isRequired\n  }\n\nconst getTransactions = (transactions, name) =>{\n  var tmp = [...transactions].sort((a,b) =>{\n      if(new Date(a[\"date\"]) < new Date(parseFloat(b[\"date\"]))){\n        return 1;\n      }else if(new Date(a[\"date\"]) > new Date(b[\"date\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n    })\n  var newTransactions = [];\n  for(var entry of tmp){\n    if(entry.name === name && entry.transactiontype === \"Utdelning\"){\n      newTransactions.push(entry);\n    }\n  }\n  return newTransactions;\n}\n\nconst getSummary = (summaries, name) => {\n    for(var entry of summaries){\n        if(entry.name === name){\n            return entry.divident;\n        }\n    }\n    return 0; // No summary with the name we are looking for found \n}\n\nconst mapStateToProps = (state) => ({\n  transactions: getTransactions(state.TransactionsStore.transactions, state.TransactionsStore.stockPage),\n  dividents: getSummary(state.TransactionsStore.summaries, state.TransactionsStore.stockPage)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DividentBar)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport StockBuySell from './graphs/StockBuySell';\nimport DividentBar from './graphs/DividentBar';\nimport DataSummary from './DataSummary';\nimport TransactionList from './TransactionList'\n\n\nconst StockPage = ({name, dispatch}) => {\n  return(\n    <Container className={\"fullScreenWidth\"}>\n\n      <Row>\n        <Col lg={5} md={12} sm={12}> \n          <Row><Col> <DataSummary name={name}/></Col></Row>\n          <Row> <Col><StockBuySell/></Col> </Row>\n          <Row > <DividentBar/> </Row>\n        </Col>\n        <Col lg={7} md={12} sm={12}> \n          <TransactionList name={name}/>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nStockPage.propTypes = {\n  name: PropTypes.string.isRequired\n}\n\n\nconst mapStateToProps = (state) => ({\n  name: state.TransactionsStore.stockPage\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StockPage)\n","import React from 'react'\nimport StockSummaryWindows from './StockSumWindows'\nimport OverallSummary from './graphs/OverallSummary'\nimport {Container, Row, Col} from 'react-bootstrap'\nimport InvestedMoney from './graphs/InvestedMoney'\nimport PieSummary from './graphs/PieSummary'\n\nconst Graphs = () => {\n  return(\n    <Container>\n        <Row>\n            <Col>\n            <OverallSummary/>\n            </Col>\n            <Col>\n            <InvestedMoney/>          \n            </Col>\n        </Row>\n        <Row>\n            <Col>\n            <p className=\"GraphSummaries underLine\"> Top 10 Bought </p>\n            <PieSummary dataKey={\"paid\"}/>\n            </Col>\n            <Col>\n            <p className=\"GraphSummaries underLine\"> Top 10 Sold </p>\n            <PieSummary dataKey={\"sold\"}/>\n            </Col>\n    </Row>\n    </Container>\n  )\n}\n\nexport default Graphs\n","import Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {BrowserRouter, Route, Switch, Link, Redirect} from 'react-router-dom'\n\nimport DataTables from './DataTables'\nimport Home from './Home'\nimport StockPage from './StockPage'\nimport { setStockpage } from '../actions'\nimport Graphs from './Graphs'\n\nconst MyNavBar = ({setStockpage, summaries, dispatch}) => {\n\n  const items = (summaries) => {\n    return(\n      summaries.map(entry => {\n        var url = \"/StockPage\";\n        return(\n          <NavDropdown.Item className=\"navCenter\"><Link onClick={() => setStockpage(entry.name)} to={url}>{entry.name}</Link></NavDropdown.Item>\n        )\n      })\n    )\n  }\n\n  return(\n    <BrowserRouter>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Trade Summary</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto navCenter\">\n            <Link className=\"navCenter\" to=\"/Home\">Home</Link>\n            <Link className=\"navCenter\" to=\"/DataTables\">Data Tables</Link>\n            <Link className=\"navCenter\" to=\"/Graphs\">Graphs</Link>\n          </Nav>\n          <Nav>\n            <Link className=\"navCenter\" to=\"#About\">About</Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Switch>\n        <Route exact from=\"/\" component={Home} />\n        <Route exact path=\"/TradeSummaryApp\" component={Home} />\n        <Route exact path=\"/Home\" component={Home} />\n        <Route path=\"/DataTables\" component={DataTables} />\n        <Route path=\"/StockPage\" component={StockPage} />\n        <Route path=\"/Graphs\" component={Graphs} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nMyNavBar.propTypes = {\n  summaries: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    amountOwned: PropTypes.number.isRequired,\n    paid: PropTypes.number.isRequired,\n    sharesBought: PropTypes.number.isRequired,\n    sold: PropTypes.number.isRequired,\n    sharesSold: PropTypes.number.isRequired,\n    avgBought: PropTypes.number.isRequired,\n    divident: PropTypes.number.isRequired,\n    profit: PropTypes.number.isRequired,\n    brokerage: PropTypes.number.isRequired\n  }).isRequired).isRequired\n}\n\nconst getSummaries = (summaries) =>{\n  return (\n    [...summaries].sort((a,b) =>{\n      if(parseFloat(a[\"name\"]) < parseFloat(b[\"name\"])){\n        return 1;\n      }else if(parseFloat(a[\"name\"]) > parseFloat(b[\"name\"])){\n        return -1;\n      }else{\n        return 0;\n      }\n  })\n  )\n}\n\nconst mapStateToProps = (state) => ({\n  summaries: getSummaries(state.TransactionsStore.summaries)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setStockpage: (name) => dispatch(setStockpage(name))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNavBar);\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MyNavBar from './components/MyNavBar'\nimport Home from './components/Home'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n      integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n      crossOrigin=\"anonymous\"></script>\n\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js\"\n      integrity=\"sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ\"\n      crossOrigin=\"anonymous\"></script>\n\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js\"\n      integrity=\"sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm\"\n      crossOrigin=\"anonymous\"></script>\n\n      <MyNavBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0,\n  sortFilter: \"date\",\n  sortOrder: \"DESC\",\n  readPercentage: [{x:1, y: 0},{x:2, y:100}],\n  stockPage: \"\",\n  showExtraStock: \"\", // Decides which stock should render extra information\n  renderData: false,\n  splits: []\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    // Add whole chunk of transactions\n    case 'ADD_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: action.payload\n      }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'ADD_SPLITS':\n    return {\n      ...state,\n      splits: action.payload\n    };\n    case 'SET_TRANSACTIONS':\n      return {\n        ...state,\n        transactions: action.payload\n      };\n    case 'REMOVE_TRANSACTIONS':\n      return{\n        ...state,\n        transactions: [],\n        summaries: [],\n        splits: [],\n        profit: 0,\n        sortFilter: \"date\",\n        sortOrder: \"DESC\",\n        readPercentage: [{x:1, y: 0},{x:2, y:100}],\n        stockPage: \"\",\n        showExtraStock: \"\", // Decides which stock should render extra information\n        renderData: false\n      }\n    case 'ADD_SUMMARY':\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_SUMMARY':\n      return{\n        ...state,\n        summaries:\n         state.summaries.map(summary =>\n          (summary.name === action.payload.name)\n            ? action.payload\n            : summary\n          )\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    case 'SORT_FILTER':\n      return {\n        ...state,\n        transactions: [...state.transactions].sort((a,b) => {\n          var res = 0;\n          if(action.payload === state.sortFilter){\n            return res;\n          }\n          else{\n            if(state.sortOrder === \"DESC\"){\n              if(a[action.payload] < b[action.payload]) {\n                res = -1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = 1;\n              }\n              return res;\n            }else{\n              if(a[action.payload] < b[action.payload]) {\n                res = 1;\n              }\n              else if( a[action.payload] > b[action.payload]){\n                res = -1;\n              }\n              return res;\n            }\n          }\n        }),\n        sortFilter: action.payload,\n        sortOrder: state.sortOrder === \"DESC\" ? \"ASC\" : \"DESC\"\n      }\n    case 'SET_PERCENTAGE':\n      return {\n        ...state,\n        readPercentage: [\n          {x:1, y:parseFloat(action.payload)},\n          {x:2, y:parseFloat(1-action.payload)}\n        ]\n      }\n    case 'SEE_STOCK_PAGE':\n      return{\n        ...state,\n        stockPage: action.payload\n      }\n    case 'SHOW_EXTRA_STOCK_INFO':\n      return{\n        ...state,\n        showExtraStock: action.payload\n      }\n    case 'RENDER_DATA':\n      return{\n        ...state,\n        renderData: true\n      }\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}