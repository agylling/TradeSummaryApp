{"version":3,"sources":["components/FileEntry.js","actions/index.js","components/Transaction.js","components/TransactionList.js","components/Stock.js","components/DataSummary.js","components/Profit.js","App.js","reducers/transactionsReducer.js","reducers/index.js","index.js"],"names":["fileReader","FileReader","connect","dispatch","addTransaction","date","account","transactiontype","stockname","amount","price","total","brokerage","currency","id","index","transactionType","type","included","handleFileRead","e","preventDefault","content","result","lines","replace","split","i","length","entry","className","accept","onChange","file","target","files","onloadend","readAsText","include","defaultChecked","onClick","state","transactions","TransactionsStore","map","item","Stock","name","addBuy","paid","parseFloat","sharesBought","amountOwned","avgBought","sell","tmpSold","sharesSold","sold","addDividents","divident","getProfits","totalSold","profit","returnProfit","printInformation","toFixed","roundDecimals","this","ShareSummary","stock","addSummary","payload","setProfit","stockMap","Map","entries","totalProfit","has","set","get","transaction","constObject","Object","assign","handleTransaction","summarize","values","push","renderSummary","App","defaultState","summaries","transactionsReducer","action","console","log","combineReducers","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.f6774044.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { addTransaction } from '../actions'\n\nconst fileReader = new FileReader();\n\nconst FileEntry = ({addTransaction, dispatch}) => {\n  const handleFileRead = (e) => {\n      e.preventDefault();\n      var content = fileReader.result;\n      content = content.replace(/,/g, \".\");\n      const lines = content.split('\\n');\n      for(var i = 0; i < lines.length; i++){\n        var entry = lines[i].split(';');\n        if(i === 0 || i === lines.length-1){\n          continue; // First row = headers, last empty\n        }\n        addTransaction(entry[0], entry[1], entry[2], entry[3], entry[4], entry[5], entry[6], entry[7], entry[8], entry[9], (i-1));\n      }\n    }\n\n  const handleFileChosen = (file) => {\n      fileReader.onloadend = handleFileRead;\n      fileReader.readAsText(file);\n  }\n\n  return(\n    <div>\n      <input type='file'\n             id='file'\n             className='input-file'\n             accept='.csv'\n             onChange={e => handleFileChosen(e.target.files[0], addTransaction)}\n      />\n    </div>\n  )\n}\n\nFileEntry.propTypes = {\n  addTransaction: PropTypes.func.isRequired\n}\n\n\n//TODO: MAKE IT WORK FROM FILEENTRYCONTAINER ://\n// Container Component\n\nconst mapDispatchToProps = (dispatch) => ({\n  addTransaction: (date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index) => dispatch(addTransaction(date, account, transactiontype, stockname, amount, price, total, brokerage, currency, id, index))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(FileEntry)\n","export const include = (index, date, include) => (\n  {\n  type: \"INCLUDE\",\n  index: index,\n  date: date,\n  included: include}\n);\n\nexport const addTransaction = (date, account, transactionType, stockname, amount, price, total, brokerage, currency, id, index) => (\n  {\n  type: \"ADD_TRANSACTION\",\n  date: date,\n  account: account,\n  transactiontype: transactionType,\n  stockname: stockname,\n  amount: amount,\n  price: price,\n  total: total,\n  brokerage: brokerage,\n  currency: currency,\n  id: id,\n  included: true,\n  index: index\n  }\n);\n\nexport const addSummary = (entries) => (\n  {\n    type: \"ADD_SUMMARY\",\n    payload: entries\n  }\n)\n\nexport const setProfit = (profit) => ({\n  type: \"SET_PROFIT\",\n  payload: profit\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport { include } from \"../actions\"\n\nconst Transaction = ({\n  include, dispatch,\n  date, account, transactiontype,\n  stockname, amount, price,\n  total, brokerage, currency,\n  id, included, index\n }) => (\n  <tr>\n    <td>\n      <input type=\"checkbox\" defaultChecked\n        onClick={() => { include(index, date,included)}}\n      />\n    </td>\n    <td>  {date}  </td>\n    <td>  {account}   </td>\n    <td>  {transactiontype}   </td>\n    <td>  {stockname}   </td>\n    <td>  {amount}   </td>\n    <td>  {price}   </td>\n    <td>  {total}   </td>\n    <td>  {brokerage}   </td>\n    <td>  {currency}   </td>\n    <td>  {id}   </td>\n  </tr>\n)\n\nTransaction.propTypes = {\n  date: PropTypes.string.isRequired,\n  account: PropTypes.string.isRequired,\n  transactiontype: PropTypes.string.isRequired,\n  stockname: PropTypes.string.isRequired,\n  amount: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  total: PropTypes.string.isRequired,\n  brokerage: PropTypes.string.isRequired,\n  currency: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  included: PropTypes.bool.isRequired,\n  include: PropTypes.func.isRequired,\n  index: PropTypes.number.isRequired\n}\n\nconst mapDispatchToProps = dispatch => ({\n  include: (index, date,included) => {dispatch(include(index, date, included))}\n})\n\nexport default connect(null, mapDispatchToProps)(Transaction)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Transaction from './Transaction'\nimport { connect } from 'react-redux'\n\nconst TransactionList = ({ transactions }) => (\n  <table className=\"centering\">\n    <thead>\n        <tr>\n        <th> Included </th>\n        <th> Date </th>\n        <th> Account </th>\n        <th> Transactiontype </th>\n        <th> Name </th>\n        <th> Amount </th>\n        <th> Price </th>\n        <th> Total </th>\n        <th> Brokerage </th>\n        <th> Currency </th>\n        <th> Id </th>\n      </tr>\n    </thead>\n    <tbody>\n      {transactions.map(item =>\n        <Transaction\n          {...item}\n        />\n      )}\n    </tbody>\n  </table>\n)\n\nTransactionList.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n}\n\nconst getTransactions = (transactions) => {\n  return transactions;\n}\n\nconst mapStateToProps = state => ({\n  transactions: getTransactions(state.TransactionsStore.transactions)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList)\n","import React from 'react';\n\nexport default class Stock {\n  constructor(name){\n    this.name = name;\n    this.amountOwned = 0.0;\n    this.paid = 0.0;\n    this.sharesBought = 0.0;\n    this.sold = 0.0;\n    this.sharesSold = 0.0;\n    this.avgBought = 0.0;\n    this.divident = 0.0;\n    this.profit = 0.0;\n    this.brokerage = 0.0;\n  }\n\n  addBuy = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    this.paid += (parseFloat(price)*parseFloat(amount));\n    this.sharesBought += parseFloat(amount);\n    this.amountOwned += parseFloat(amount);\n    this.avgBought = parseFloat(this.paid / this.sharesBought);\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  sell = (amount, price, brokerage) => {\n    // Handles free brokerage transactions\n    brokerage = brokerage === '-' ? 0 : brokerage;\n    var tmpSold = -1 * parseFloat(amount) * parseFloat(price);\n    this.amountOwned += parseFloat(amount);\n    this.sharesSold += -1*parseFloat(amount);\n    this.sold += tmpSold;\n    this.brokerage += parseFloat(brokerage);\n  }\n\n  addDividents = (amount, divident) => {\n    this.divident += parseFloat(amount)*parseFloat(divident);\n  }\n\n  getProfits = () => {\n    var totalSold = parseFloat(this.sharesBought) < parseFloat(this.sharesSold) ?\n      parseFloat(this.sharesBought) : parseFloat(this.sharesSold);\n    this.profit = parseFloat(this.sold) - (totalSold*this.avgBought) + parseFloat(this.divident) - parseFloat(this.brokerage);\n  }\n\n  returnProfit = () => {\n    return this.profit;\n  }\n\n  printInformation = () => {\n    if(this.profit === 0){\n      return null;\n    }\n    return (\n      <tr>\n        <td>{this.name}</td>\n        <td>{this.sharesBought}</td>\n        <td>{this.avgBought}</td>\n        <td>{this.paid}</td>\n        <td>{this.sharesSold}</td>\n        <td>{parseFloat(parseFloat(this.sold)/parseFloat(this.sharesSold)).toFixed(2)}</td>\n        <td>{this.sold}</td>\n        <td>{this.divident}</td>\n        <td>{this.brokerage}</td>\n        <td>{this.profit}</td>\n      </tr>\n    );\n  }\n\n  roundDecimals = () => {\n    this.amountOwned = parseFloat(this.amountOwned.toFixed(2));\n    this.paid = parseFloat(this.paid.toFixed(2));\n    this.sharesBought = parseFloat(this.sharesBought.toFixed(2));\n    this.sold = parseFloat(this.sold.toFixed(2));\n    this.sharesSold = parseFloat(this.sharesSold.toFixed(2));\n    this.avgBought = parseFloat(this.avgBought.toFixed(2));\n    this.divident = parseFloat(this.divident.toFixed(2));\n    this.profit = parseFloat(this.profit.toFixed(2));\n    this.brokerage = parseFloat(this.brokerage.toFixed(2));\n  }\n}\n\nexport const ShareSummary = (stock) => {\n  return(\n    stock.printInformation()\n  );\n}\n/*<p> Bought a total of {stock.sharesBought} shares. </p>\n<p> Average paid: {stock.avgBought},  at a total of  {stock.paid} <br/> </p>\n<p> Sold a total of {stock.sharesSold} average sold for: {parseFloat(stock.sold / stock.sharesSold).toFixed(2)} </p>\n<p> total: {stock.sold} <br/> received {stock.dividents} in dicidents </p>\n<p> <br/> total brokerage payed: {stock.brokerage} <br/> Profits: {stock.profit} <br/><br/> </p> */\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport Stock from './Stock'\nimport {ShareSummary} from './Stock'\nimport {addSummary, setProfit} from '../actions'\n\nconst DataSummary = ({transactions, addSummary, setProfit, dispatch}) => {\n  // Tracks the summarized info for each stock\n  var stockMap = new Map();\n  var entries = [];\n  var totalProfit = 0;\n\n  const handleTransaction = (stock, transaction) => {\n    var constObject = Object.assign({}, transaction);\n    switch(constObject.transactiontype){\n      case 'Köp':\n        stock.addBuy(constObject.amount, constObject.price, constObject.brokerage)\n        break;\n      case 'Sälj':\n        stock.sell(constObject.amount, constObject.price, constObject.brokerage);\n        break;\n      case 'Utdelning':\n        stock.addDividents(constObject.amount, constObject.price);\n        break;\n      default: break;\n    }\n    stock.getProfits();\n    stock.roundDecimals();\n  };\n\n  const summarize = (transactions) => {\n      // Iterate through all transactions = true\n      transactions.map(entry => {\n        // If the stock doesn't already exist in the database, create new instance\n        if(!stockMap.has(entry.stockname)) {\n          stockMap.set(entry.stockname, new Stock(entry.stockname));\n        }\n        var stock = stockMap.get(entry.stockname)\n        if(entry.included){\n          handleTransaction(stock, entry);\n        }\n      });\n  };\n\n  const renderSummary = (entries) => {\n    for(var entry of stockMap.values()){\n      entries.push(entry);\n    }\n    return(\n      entries.map(entry => {\n          {totalProfit += parseFloat(entry.returnProfit())}\n          {setProfit(totalProfit)}\n          return <ShareSummary {...entry}/>\n      })\n    )\n  };\n\n  return(\n    summarize(transactions),\n    addSummary(entries),\n    <div className=\"centering\">\n      <table className=\"centering\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Bought</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Sold</th>\n            <th>@avg</th>\n            <th>Total</th>\n            <th>Dividents</th>\n            <th>Brokerage</th>\n            <th>Profit</th>\n          </tr>\n        </thead>\n        <tbody>\n         {renderSummary(entries)}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nDataSummary.propTypes = {\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    account: PropTypes.string.isRequired,\n    transactiontype: PropTypes.string.isRequired,\n    stockname: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    price: PropTypes.string.isRequired,\n    total: PropTypes.string.isRequired,\n    brokerage: PropTypes.string.isRequired,\n    currency: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    included: PropTypes.bool.isRequired,\n    index: PropTypes.number.isRequired\n  }).isRequired).isRequired,\n  addSummary: PropTypes.func.isRequired\n}\n\n// Container Component\n\nconst mapStateToProps = state => ({\n  transactions: state.TransactionsStore.transactions,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  addSummary: stock => dispatch(addSummary(stock)),\n  setProfit:  profit => dispatch(setProfit(profit))\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DataSummary)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nconst Profit = ({profit, dispatch}) => {\n  return (\n  <h2> Total Profit: {profit} </h2>\n  )\n}\n\nconst mapStateToProps = state => ({\n  profit: (state.TransactionsStore.profit)\n})\n\nconst mapDispatchToProps = dispatch => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profit)\n","import React from 'react';\nimport './App.css';\nimport FileEntry from './components/FileEntry'\nimport TransactionList from './components/TransactionList'\nimport DataSummary from './components/DataSummary'\nimport Profit from './components/Profit'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profit/>\n      <FileEntry />\n      <TransactionList />\n      <DataSummary />\n    </div>\n  );\n}\n\nexport default App;\n","const defaultState = {\n  transactions: [],\n  summaries: [],\n  profit: 0\n}\n\nconst transactionsReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'INCLUDE':\n      console.log(\"IN INCLUDE\")\n      return {...state, transactions:\n        state.transactions.map(transaction =>\n        (transaction.index === action.index && transaction.name === action.name)\n          ? {...transaction, included: !action.included}\n          : transaction\n        )\n    }\n    case 'ADD_TRANSACTION':\n      return {\n        ...state,\n        transactions: [\n          ...state.transactions,\n          {\n            date: action.date,\n            account: action.account,\n            transactiontype: action.transactiontype,\n            stockname: action.stockname,\n            amount: action.amount,\n            price: action.price,\n            total: action.total,\n            brokerage: action.brokerage,\n            currency: action.currency,\n            id: action.id,\n            included: true,\n            index: action.index\n          }\n        ]\n      };\n    case 'ADD_SUMMARY':\n    console.log(\"IN ADD_SUMMARY\");\n      return{\n        ...state,\n        summaries: action.payload\n      };\n    case 'SET_PROFIT':\n      return {\n        ...state,\n        profit: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\nexport default transactionsReducer\n","import {combineReducers} from 'redux';\nimport transactionsReducer from './transactionsReducer'\n\nexport default combineReducers({\n  TransactionsStore: transactionsReducer\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n)\n"],"sourceRoot":""}